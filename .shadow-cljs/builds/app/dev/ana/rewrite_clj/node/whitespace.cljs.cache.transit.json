["^ ","~:output",["^ ","~:js","goog.provide('rewrite_clj.node.whitespace');\ngoog.require('cljs.core');\ngoog.require('rewrite_clj.node.protocols');\n/**\n * This function is applied to every newline string.\n */\nrewrite_clj.node.whitespace._STAR_newline_fn_STAR_ = cljs.core.identity;\n/**\n * This function is applied to every newline string and should produce\n * the eventual character count.\n */\nrewrite_clj.node.whitespace._STAR_count_fn_STAR_ = cljs.core.count;\n\n/**\n* @constructor\n * @implements {cljs.core.IRecord}\n * @implements {cljs.core.IKVReduce}\n * @implements {cljs.core.IEquiv}\n * @implements {cljs.core.IHash}\n * @implements {cljs.core.ICollection}\n * @implements {cljs.core.ICounted}\n * @implements {cljs.core.ISeqable}\n * @implements {cljs.core.IMeta}\n * @implements {cljs.core.ICloneable}\n * @implements {cljs.core.IPrintWithWriter}\n * @implements {cljs.core.IIterable}\n * @implements {rewrite_clj.node.protocols.Node}\n * @implements {cljs.core.IWithMeta}\n * @implements {cljs.core.IAssociative}\n * @implements {cljs.core.IMap}\n * @implements {cljs.core.ILookup}\n*/\nrewrite_clj.node.whitespace.WhitespaceNode = (function (whitespace,__meta,__extmap,__hash){\nthis.whitespace = whitespace;\nthis.__meta = __meta;\nthis.__extmap = __extmap;\nthis.__hash = __hash;\nthis.cljs$lang$protocol_mask$partition0$ = 2230716170;\nthis.cljs$lang$protocol_mask$partition1$ = 139264;\n});\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.toString = (function (){\nvar self__ = this;\nvar this$ = this;\nreturn this$.rewrite_clj$node$protocols$Node$string$arity$1(null);\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (this__4439__auto__,k__4440__auto__){\nvar self__ = this;\nvar this__4439__auto____$1 = this;\nreturn this__4439__auto____$1.cljs$core$ILookup$_lookup$arity$3(null,k__4440__auto__,null);\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (this__4441__auto__,k49156,else__4442__auto__){\nvar self__ = this;\nvar this__4441__auto____$1 = this;\nvar G__49161 = k49156;\nvar G__49161__$1 = (((G__49161 instanceof cljs.core.Keyword))?G__49161.fqn:null);\nswitch (G__49161__$1) {\ncase \"whitespace\":\nreturn self__.whitespace;\n\nbreak;\ndefault:\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k49156,else__4442__auto__);\n\n}\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (this__4458__auto__,f__4459__auto__,init__4460__auto__){\nvar self__ = this;\nvar this__4458__auto____$1 = this;\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ret__4461__auto__,p__49165){\nvar vec__49166 = p__49165;\nvar k__4462__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49166,(0),null);\nvar v__4463__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49166,(1),null);\nreturn (f__4459__auto__.cljs$core$IFn$_invoke$arity$3 ? f__4459__auto__.cljs$core$IFn$_invoke$arity$3(ret__4461__auto__,k__4462__auto__,v__4463__auto__) : f__4459__auto__.call(null,ret__4461__auto__,k__4462__auto__,v__4463__auto__));\n}),init__4460__auto__,this__4458__auto____$1);\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (this__4453__auto__,writer__4454__auto__,opts__4455__auto__){\nvar self__ = this;\nvar this__4453__auto____$1 = this;\nvar pr_pair__4456__auto__ = (function (keyval__4457__auto__){\nreturn cljs.core.pr_sequential_writer(writer__4454__auto__,cljs.core.pr_writer,\"\",\" \",\"\",opts__4455__auto__,keyval__4457__auto__);\n});\nreturn cljs.core.pr_sequential_writer(writer__4454__auto__,pr_pair__4456__auto__,\"#rewrite-clj.node.whitespace.WhitespaceNode{\",\", \",\"}\",opts__4455__auto__,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483),self__.whitespace],null))], null),self__.__extmap));\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (G__49155){\nvar self__ = this;\nvar G__49155__$1 = this;\nreturn (new cljs.core.RecordIter((0),G__49155__$1,1,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null),(cljs.core.truth_(self__.__extmap)?cljs.core._iterator(self__.__extmap):cljs.core.nil_iter())));\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$IMeta$_meta$arity$1 = (function (this__4437__auto__){\nvar self__ = this;\nvar this__4437__auto____$1 = this;\nreturn self__.__meta;\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (this__4434__auto__){\nvar self__ = this;\nvar this__4434__auto____$1 = this;\nreturn (new rewrite_clj.node.whitespace.WhitespaceNode(self__.whitespace,self__.__meta,self__.__extmap,self__.__hash));\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$ICounted$_count$arity$1 = (function (this__4443__auto__){\nvar self__ = this;\nvar this__4443__auto____$1 = this;\nreturn (1 + cljs.core.count(self__.__extmap));\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$IHash$_hash$arity$1 = (function (this__4435__auto__){\nvar self__ = this;\nvar this__4435__auto____$1 = this;\nvar h__4297__auto__ = self__.__hash;\nif((!((h__4297__auto__ == null)))){\nreturn h__4297__auto__;\n} else {\nvar h__4297__auto____$1 = (function (){var fexpr__49182 = (function (coll__4436__auto__){\nreturn (1595850179 ^ cljs.core.hash_unordered_coll(coll__4436__auto__));\n});\nreturn fexpr__49182(this__4435__auto____$1);\n})();\n(self__.__hash = h__4297__auto____$1);\n\nreturn h__4297__auto____$1;\n}\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this49157,other49158){\nvar self__ = this;\nvar this49157__$1 = this;\nreturn (((!((other49158 == null)))) && ((this49157__$1.constructor === other49158.constructor)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this49157__$1.whitespace,other49158.whitespace)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this49157__$1.__extmap,other49158.__extmap)));\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.rewrite_clj$node$protocols$Node$ = cljs.core.PROTOCOL_SENTINEL);\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.rewrite_clj$node$protocols$Node$tag$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483);\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.rewrite_clj$node$protocols$Node$printable_only_QMARK_$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn true;\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.rewrite_clj$node$protocols$Node$sexpr$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nthrow (new Error(\"Unsupported operation\"));\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.rewrite_clj$node$protocols$Node$length$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn cljs.core.count(self__.whitespace);\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.rewrite_clj$node$protocols$Node$string$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn self__.whitespace;\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (this__4448__auto__,k__4449__auto__){\nvar self__ = this;\nvar this__4448__auto____$1 = this;\nif(cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483),null], null), null),k__4449__auto__)){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core._with_meta(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,this__4448__auto____$1),self__.__meta),k__4449__auto__);\n} else {\nreturn (new rewrite_clj.node.whitespace.WhitespaceNode(self__.whitespace,self__.__meta,cljs.core.not_empty(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.__extmap,k__4449__auto__)),null));\n}\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (this__4446__auto__,k__4447__auto__,G__49155){\nvar self__ = this;\nvar this__4446__auto____$1 = this;\nvar pred__49206 = cljs.core.keyword_identical_QMARK_;\nvar expr__49207 = k__4447__auto__;\nif(cljs.core.truth_((function (){var G__49213 = new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483);\nvar G__49214 = expr__49207;\nreturn (pred__49206.cljs$core$IFn$_invoke$arity$2 ? pred__49206.cljs$core$IFn$_invoke$arity$2(G__49213,G__49214) : pred__49206.call(null,G__49213,G__49214));\n})())){\nreturn (new rewrite_clj.node.whitespace.WhitespaceNode(G__49155,self__.__meta,self__.__extmap,null));\n} else {\nreturn (new rewrite_clj.node.whitespace.WhitespaceNode(self__.whitespace,self__.__meta,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k__4447__auto__,G__49155),null));\n}\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this__4451__auto__){\nvar self__ = this;\nvar this__4451__auto____$1 = this;\nreturn cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483),self__.whitespace,null))], null),self__.__extmap));\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (this__4438__auto__,G__49155){\nvar self__ = this;\nvar this__4438__auto____$1 = this;\nreturn (new rewrite_clj.node.whitespace.WhitespaceNode(self__.whitespace,G__49155,self__.__extmap,self__.__hash));\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$ICollection$_conj$arity$2 = (function (this__4444__auto__,entry__4445__auto__){\nvar self__ = this;\nvar this__4444__auto____$1 = this;\nif(cljs.core.vector_QMARK_(entry__4445__auto__)){\nreturn this__4444__auto____$1.cljs$core$IAssociative$_assoc$arity$3(null,cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry__4445__auto__,(0)),cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry__4445__auto__,(1)));\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj,this__4444__auto____$1,entry__4445__auto__);\n}\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"whitespace\",\"whitespace\",300496044,null)], null);\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.cljs$lang$type = true);\n\n(rewrite_clj.node.whitespace.WhitespaceNode.cljs$lang$ctorPrSeq = (function (this__4482__auto__){\nreturn (new cljs.core.List(null,\"rewrite-clj.node.whitespace/WhitespaceNode\",null,(1),null));\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.cljs$lang$ctorPrWriter = (function (this__4482__auto__,writer__4483__auto__){\nreturn cljs.core._write(writer__4483__auto__,\"rewrite-clj.node.whitespace/WhitespaceNode\");\n}));\n\n/**\n * Positional factory function for rewrite-clj.node.whitespace/WhitespaceNode.\n */\nrewrite_clj.node.whitespace.__GT_WhitespaceNode = (function rewrite_clj$node$whitespace$__GT_WhitespaceNode(whitespace){\nreturn (new rewrite_clj.node.whitespace.WhitespaceNode(whitespace,null,null,null));\n});\n\n/**\n * Factory function for rewrite-clj.node.whitespace/WhitespaceNode, taking a map of keywords to field values.\n */\nrewrite_clj.node.whitespace.map__GT_WhitespaceNode = (function rewrite_clj$node$whitespace$map__GT_WhitespaceNode(G__49159){\nvar extmap__4478__auto__ = (function (){var G__49217 = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(G__49159,new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483));\nif(cljs.core.record_QMARK_(G__49159)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,G__49217);\n} else {\nreturn G__49217;\n}\n})();\nreturn (new rewrite_clj.node.whitespace.WhitespaceNode(new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483).cljs$core$IFn$_invoke$arity$1(G__49159),null,cljs.core.not_empty(extmap__4478__auto__),null));\n});\n\n\n/**\n* @constructor\n * @implements {cljs.core.IRecord}\n * @implements {cljs.core.IKVReduce}\n * @implements {cljs.core.IEquiv}\n * @implements {cljs.core.IHash}\n * @implements {cljs.core.ICollection}\n * @implements {cljs.core.ICounted}\n * @implements {cljs.core.ISeqable}\n * @implements {cljs.core.IMeta}\n * @implements {cljs.core.ICloneable}\n * @implements {cljs.core.IPrintWithWriter}\n * @implements {cljs.core.IIterable}\n * @implements {rewrite_clj.node.protocols.Node}\n * @implements {cljs.core.IWithMeta}\n * @implements {cljs.core.IAssociative}\n * @implements {cljs.core.IMap}\n * @implements {cljs.core.ILookup}\n*/\nrewrite_clj.node.whitespace.NewlineNode = (function (newlines,__meta,__extmap,__hash){\nthis.newlines = newlines;\nthis.__meta = __meta;\nthis.__extmap = __extmap;\nthis.__hash = __hash;\nthis.cljs$lang$protocol_mask$partition0$ = 2230716170;\nthis.cljs$lang$protocol_mask$partition1$ = 139264;\n});\n(rewrite_clj.node.whitespace.NewlineNode.prototype.toString = (function (){\nvar self__ = this;\nvar this$ = this;\nreturn this$.rewrite_clj$node$protocols$Node$string$arity$1(null);\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (this__4439__auto__,k__4440__auto__){\nvar self__ = this;\nvar this__4439__auto____$1 = this;\nreturn this__4439__auto____$1.cljs$core$ILookup$_lookup$arity$3(null,k__4440__auto__,null);\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (this__4441__auto__,k49219,else__4442__auto__){\nvar self__ = this;\nvar this__4441__auto____$1 = this;\nvar G__49224 = k49219;\nvar G__49224__$1 = (((G__49224 instanceof cljs.core.Keyword))?G__49224.fqn:null);\nswitch (G__49224__$1) {\ncase \"newlines\":\nreturn self__.newlines;\n\nbreak;\ndefault:\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k49219,else__4442__auto__);\n\n}\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (this__4458__auto__,f__4459__auto__,init__4460__auto__){\nvar self__ = this;\nvar this__4458__auto____$1 = this;\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ret__4461__auto__,p__49225){\nvar vec__49226 = p__49225;\nvar k__4462__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49226,(0),null);\nvar v__4463__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49226,(1),null);\nreturn (f__4459__auto__.cljs$core$IFn$_invoke$arity$3 ? f__4459__auto__.cljs$core$IFn$_invoke$arity$3(ret__4461__auto__,k__4462__auto__,v__4463__auto__) : f__4459__auto__.call(null,ret__4461__auto__,k__4462__auto__,v__4463__auto__));\n}),init__4460__auto__,this__4458__auto____$1);\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (this__4453__auto__,writer__4454__auto__,opts__4455__auto__){\nvar self__ = this;\nvar this__4453__auto____$1 = this;\nvar pr_pair__4456__auto__ = (function (keyval__4457__auto__){\nreturn cljs.core.pr_sequential_writer(writer__4454__auto__,cljs.core.pr_writer,\"\",\" \",\"\",opts__4455__auto__,keyval__4457__auto__);\n});\nreturn cljs.core.pr_sequential_writer(writer__4454__auto__,pr_pair__4456__auto__,\"#rewrite-clj.node.whitespace.NewlineNode{\",\", \",\"}\",opts__4455__auto__,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"newlines\",\"newlines\",-1185451518),self__.newlines],null))], null),self__.__extmap));\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (G__49218){\nvar self__ = this;\nvar G__49218__$1 = this;\nreturn (new cljs.core.RecordIter((0),G__49218__$1,1,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"newlines\",\"newlines\",-1185451518)], null),(cljs.core.truth_(self__.__extmap)?cljs.core._iterator(self__.__extmap):cljs.core.nil_iter())));\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$IMeta$_meta$arity$1 = (function (this__4437__auto__){\nvar self__ = this;\nvar this__4437__auto____$1 = this;\nreturn self__.__meta;\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (this__4434__auto__){\nvar self__ = this;\nvar this__4434__auto____$1 = this;\nreturn (new rewrite_clj.node.whitespace.NewlineNode(self__.newlines,self__.__meta,self__.__extmap,self__.__hash));\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$ICounted$_count$arity$1 = (function (this__4443__auto__){\nvar self__ = this;\nvar this__4443__auto____$1 = this;\nreturn (1 + cljs.core.count(self__.__extmap));\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$IHash$_hash$arity$1 = (function (this__4435__auto__){\nvar self__ = this;\nvar this__4435__auto____$1 = this;\nvar h__4297__auto__ = self__.__hash;\nif((!((h__4297__auto__ == null)))){\nreturn h__4297__auto__;\n} else {\nvar h__4297__auto____$1 = (function (){var fexpr__49229 = (function (coll__4436__auto__){\nreturn (979711303 ^ cljs.core.hash_unordered_coll(coll__4436__auto__));\n});\nreturn fexpr__49229(this__4435__auto____$1);\n})();\n(self__.__hash = h__4297__auto____$1);\n\nreturn h__4297__auto____$1;\n}\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this49221,other49222){\nvar self__ = this;\nvar this49221__$1 = this;\nreturn (((!((other49222 == null)))) && ((this49221__$1.constructor === other49222.constructor)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this49221__$1.newlines,other49222.newlines)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this49221__$1.__extmap,other49222.__extmap)));\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.rewrite_clj$node$protocols$Node$ = cljs.core.PROTOCOL_SENTINEL);\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.rewrite_clj$node$protocols$Node$tag$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323);\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.rewrite_clj$node$protocols$Node$printable_only_QMARK_$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn true;\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.rewrite_clj$node$protocols$Node$sexpr$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nthrow (new Error(\"Unsupported operation\"));\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.rewrite_clj$node$protocols$Node$length$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn (rewrite_clj.node.whitespace._STAR_count_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.node.whitespace._STAR_count_fn_STAR_.cljs$core$IFn$_invoke$arity$1(self__.newlines) : rewrite_clj.node.whitespace._STAR_count_fn_STAR_.call(null,self__.newlines));\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.rewrite_clj$node$protocols$Node$string$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn (rewrite_clj.node.whitespace._STAR_newline_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.node.whitespace._STAR_newline_fn_STAR_.cljs$core$IFn$_invoke$arity$1(self__.newlines) : rewrite_clj.node.whitespace._STAR_newline_fn_STAR_.call(null,self__.newlines));\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (this__4448__auto__,k__4449__auto__){\nvar self__ = this;\nvar this__4448__auto____$1 = this;\nif(cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"newlines\",\"newlines\",-1185451518),null], null), null),k__4449__auto__)){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core._with_meta(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,this__4448__auto____$1),self__.__meta),k__4449__auto__);\n} else {\nreturn (new rewrite_clj.node.whitespace.NewlineNode(self__.newlines,self__.__meta,cljs.core.not_empty(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.__extmap,k__4449__auto__)),null));\n}\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (this__4446__auto__,k__4447__auto__,G__49218){\nvar self__ = this;\nvar this__4446__auto____$1 = this;\nvar pred__49246 = cljs.core.keyword_identical_QMARK_;\nvar expr__49247 = k__4447__auto__;\nif(cljs.core.truth_((function (){var G__49249 = new cljs.core.Keyword(null,\"newlines\",\"newlines\",-1185451518);\nvar G__49250 = expr__49247;\nreturn (pred__49246.cljs$core$IFn$_invoke$arity$2 ? pred__49246.cljs$core$IFn$_invoke$arity$2(G__49249,G__49250) : pred__49246.call(null,G__49249,G__49250));\n})())){\nreturn (new rewrite_clj.node.whitespace.NewlineNode(G__49218,self__.__meta,self__.__extmap,null));\n} else {\nreturn (new rewrite_clj.node.whitespace.NewlineNode(self__.newlines,self__.__meta,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k__4447__auto__,G__49218),null));\n}\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this__4451__auto__){\nvar self__ = this;\nvar this__4451__auto____$1 = this;\nreturn cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"newlines\",\"newlines\",-1185451518),self__.newlines,null))], null),self__.__extmap));\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (this__4438__auto__,G__49218){\nvar self__ = this;\nvar this__4438__auto____$1 = this;\nreturn (new rewrite_clj.node.whitespace.NewlineNode(self__.newlines,G__49218,self__.__extmap,self__.__hash));\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$ICollection$_conj$arity$2 = (function (this__4444__auto__,entry__4445__auto__){\nvar self__ = this;\nvar this__4444__auto____$1 = this;\nif(cljs.core.vector_QMARK_(entry__4445__auto__)){\nreturn this__4444__auto____$1.cljs$core$IAssociative$_assoc$arity$3(null,cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry__4445__auto__,(0)),cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry__4445__auto__,(1)));\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj,this__4444__auto____$1,entry__4445__auto__);\n}\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"newlines\",\"newlines\",455080009,null)], null);\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.cljs$lang$type = true);\n\n(rewrite_clj.node.whitespace.NewlineNode.cljs$lang$ctorPrSeq = (function (this__4482__auto__){\nreturn (new cljs.core.List(null,\"rewrite-clj.node.whitespace/NewlineNode\",null,(1),null));\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.cljs$lang$ctorPrWriter = (function (this__4482__auto__,writer__4483__auto__){\nreturn cljs.core._write(writer__4483__auto__,\"rewrite-clj.node.whitespace/NewlineNode\");\n}));\n\n/**\n * Positional factory function for rewrite-clj.node.whitespace/NewlineNode.\n */\nrewrite_clj.node.whitespace.__GT_NewlineNode = (function rewrite_clj$node$whitespace$__GT_NewlineNode(newlines){\nreturn (new rewrite_clj.node.whitespace.NewlineNode(newlines,null,null,null));\n});\n\n/**\n * Factory function for rewrite-clj.node.whitespace/NewlineNode, taking a map of keywords to field values.\n */\nrewrite_clj.node.whitespace.map__GT_NewlineNode = (function rewrite_clj$node$whitespace$map__GT_NewlineNode(G__49223){\nvar extmap__4478__auto__ = (function (){var G__49252 = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(G__49223,new cljs.core.Keyword(null,\"newlines\",\"newlines\",-1185451518));\nif(cljs.core.record_QMARK_(G__49223)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,G__49252);\n} else {\nreturn G__49252;\n}\n})();\nreturn (new rewrite_clj.node.whitespace.NewlineNode(new cljs.core.Keyword(null,\"newlines\",\"newlines\",-1185451518).cljs$core$IFn$_invoke$arity$1(G__49223),null,cljs.core.not_empty(extmap__4478__auto__),null));\n});\n\n/**\n * Create whitespace node.\n */\nrewrite_clj.node.whitespace.whitespace_node = (function rewrite_clj$node$whitespace$whitespace_node(s){\nreturn rewrite_clj.node.whitespace.__GT_WhitespaceNode(s);\n});\n/**\n * Create newline node.\n */\nrewrite_clj.node.whitespace.newline_node = (function rewrite_clj$node$whitespace$newline_node(s){\nreturn rewrite_clj.node.whitespace.__GT_NewlineNode(s);\n});\n/**\n * Check whether a character represents a linebreak.\n */\nrewrite_clj.node.whitespace.newline_QMARK_ = (function rewrite_clj$node$whitespace$newline_QMARK_(c){\nreturn cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [\"\\n\",null,\"\\r\",null], null), null),c);\n});\n/**\n * Convert a string of whitespace to whitespace/newline nodes.\n */\nrewrite_clj.node.whitespace.whitespace_nodes = (function rewrite_clj$node$whitespace$whitespace_nodes(s){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (char_seq){\nvar s__$1 = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,char_seq);\nif(rewrite_clj.node.whitespace.newline_QMARK_(cljs.core.first(char_seq))){\nreturn rewrite_clj.node.whitespace.newline_node(s__$1);\n} else {\nreturn rewrite_clj.node.whitespace.whitespace_node(s__$1);\n}\n}),cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(rewrite_clj.node.whitespace.newline_QMARK_,s));\n});\n/**\n * Create node representing the given number of spaces.\n */\nrewrite_clj.node.whitespace.spaces = (function rewrite_clj$node$whitespace$spaces(n){\nreturn rewrite_clj.node.whitespace.whitespace_node(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(n,\" \")));\n});\n/**\n * Create node representing the given number of newline characters.\n */\nrewrite_clj.node.whitespace.newlines = (function rewrite_clj$node$whitespace$newlines(n){\nreturn rewrite_clj.node.whitespace.newline_node(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(n,\"\\n\")));\n});\nvar comma_49373 = rewrite_clj.node.whitespace.whitespace_node(\", \");\n/**\n * Interleave the given seq of nodes with `\", \"` nodes.\n */\nrewrite_clj.node.whitespace.comma_separated = (function rewrite_clj$node$whitespace$comma_separated(nodes){\nreturn cljs.core.butlast(cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(nodes,cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(comma_49373)));\n});\nvar nl_49374 = rewrite_clj.node.whitespace.newline_node(\"\\n\");\n/**\n * Interleave the given seq of nodes with newline nodes.\n */\nrewrite_clj.node.whitespace.line_separated = (function rewrite_clj$node$whitespace$line_separated(nodes){\nreturn cljs.core.butlast(cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(nodes,cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(nl_49374)));\n});\nvar space_49377 = rewrite_clj.node.whitespace.whitespace_node(\" \");\n/**\n * Interleave the given seq of nodes with `\" \"` nodes.\n */\nrewrite_clj.node.whitespace.space_separated = (function rewrite_clj$node$whitespace$space_separated(nodes){\nreturn cljs.core.butlast(cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(nodes,cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(space_49377)));\n});\n/**\n * Check whether a node represents whitespace.\n */\nrewrite_clj.node.whitespace.whitespace_QMARK_ = (function rewrite_clj$node$whitespace$whitespace_QMARK_(node){\nreturn cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483),null,new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323),null], null), null),rewrite_clj.node.protocols.tag(node));\n});\n/**\n * Check whether a ndoe represents linebreaks.\n */\nrewrite_clj.node.whitespace.linebreak_QMARK_ = (function rewrite_clj$node$whitespace$linebreak_QMARK_(node){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(rewrite_clj.node.protocols.tag(node),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","rewrite_clj/node/whitespace.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",32],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$react-flip-move","~$module$node_modules$react_flip_move$dist$react_flip_move_cjs","~$clojure.pprint","~$cljs.pprint","~$clojure.repl","~$cljs.repl","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$rewrite-clj.node.whitespace","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$rewrite-clj.node.protocols","^U","~$node","^U","~$cljs.core","^W","~$goog","^X"],"~:seen",["^N",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^W","^W"],"~:form",["~#list",["~$ns","^P",["^12",["^Z",["^U","~:as","^V"]]]]],"~:flags",["^ ","^Z",["^N",[]]],"~:js-deps",["^ "],"~:deps",["^X","^W","^U"]],"^R","^P","~:resource-id",["~:shadow.build.classpath/resource","rewrite_clj/node/whitespace.cljs"],"~:compiled-at",1577302340165,"~:resource-name","rewrite_clj/node/whitespace.cljs","~:warnings",[],"~:source","(ns rewrite-clj.node.whitespace\n  (:require [rewrite-clj.node.protocols :as node]))\n\n;; ## Newline Modifiers\n\n(def ^:dynamic *newline-fn*\n  \"This function is applied to every newline string.\"\n  identity)\n\n(def ^:dynamic *count-fn*\n  \"This function is applied to every newline string and should produce\n   the eventual character count.\"\n  count)\n\n\n;; TODO\n;; (defmacro with-newline-fn\n;;   [f & body]\n;;   `(binding [*newline-fn* (comp *newline-fn* ~f)]\n;;      ~@body))\n\n;; (defmacro with-count-fn\n;;   [f & body]\n;;   `(binding [*count-fn* (comp *count-fn* ~f)]\n;;      ~@body))\n\n;; ## Nodes\n\n(defrecord WhitespaceNode [whitespace]\n  node/Node\n  (tag [_] :whitespace)\n  (printable-only? [_] true)\n  (sexpr [_] (throw (js/Error. \"Unsupported operation\")))\n  (length [_] (count whitespace))\n  (string [_] whitespace)\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n(defrecord NewlineNode [newlines]\n  node/Node\n  (tag [_] :newline)\n  (printable-only? [_] true)\n  (sexpr [_] (throw (js/Error. \"Unsupported operation\")))\n  (length [_] (*count-fn* newlines))\n  (string [_] (*newline-fn* newlines))\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n\n;; TODO\n;; (node/make-printable! WhitespaceNode)\n;; (node/make-printable! NewlineNode)\n\n;; ## Constructors\n\n(defn whitespace-node\n  \"Create whitespace node.\"\n  [s]\n  (->WhitespaceNode s))\n\n(defn newline-node\n  \"Create newline node.\"\n  [s]\n  (->NewlineNode s))\n\n(defn- newline?\n  \"Check whether a character represents a linebreak.\"\n  [c]\n  (contains? #{\\return \\newline} c))\n\n(defn whitespace-nodes\n  \"Convert a string of whitespace to whitespace/newline nodes.\"\n  [s]\n  (->> (partition-by newline? s)\n       (map\n         (fn [char-seq]\n           (let [s (apply str char-seq)]\n             (if (newline? (first char-seq))\n               (newline-node s)\n               (whitespace-node s)))))))\n\n;; ## Utilities\n\n(defn spaces\n  \"Create node representing the given number of spaces.\"\n  [n]\n  (whitespace-node (apply str (repeat n \\space))))\n\n(defn newlines\n  \"Create node representing the given number of newline characters.\"\n  [n]\n  (newline-node (apply str (repeat n \\newline))))\n\n\n\n(let [comma (whitespace-node \", \")]\n  (defn comma-separated\n    \"Interleave the given seq of nodes with `\\\", \\\"` nodes.\"\n    [nodes]\n    (butlast (interleave nodes (repeat comma)))))\n\n(let [nl (newline-node \"\\n\")]\n  (defn line-separated\n    \"Interleave the given seq of nodes with newline nodes.\"\n    [nodes]\n    (butlast (interleave nodes (repeat nl)))))\n\n(let [space (whitespace-node \" \")]\n  (defn space-separated\n    \"Interleave the given seq of nodes with `\\\" \\\"` nodes.\"\n    [nodes]\n    (butlast (interleave nodes (repeat space)))))\n\n;; ## Predicates\n\n(defn whitespace?\n  \"Check whether a node represents whitespace.\"\n  [node]\n  (contains?\n    #{:whitespace\n      :newline}\n    (node/tag node)))\n\n(defn linebreak?\n  \"Check whether a ndoe represents linebreaks.\"\n  [node]\n  (= (node/tag node) :newline))\n","~:reader-features",["^N",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["rewrite-clj.node.whitespace/*newline-fn*","cljs.core/identity","rewrite-clj.node.whitespace/*count-fn*","cljs.core/count","this__4439__auto__","k__4440__auto__","this__4441__auto__","k49156","else__4442__auto__","G__49161","cljs.core/Keyword","whitespace","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4458__auto__","f__4459__auto__","init__4460__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4461__auto__","p__49165","vec__49166","k__4462__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v__4463__auto__","this__4453__auto__","writer__4454__auto__","opts__4455__auto__","pr-pair__4456__auto__","keyval__4457__auto__","cljs.core/pr-sequential-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__49155","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4437__auto__","__meta","this__4434__auto__","__hash","this__4443__auto__","this__4435__auto__","h__4297__auto__","fexpr__49182","coll__4436__auto__","cljs.core/hash-unordered-coll","this49157","other49158","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/PROTOCOL_SENTINEL","this__4448__auto__","k__4449__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__4446__auto__","k__4447__auto__","pred__49206","cljs.core/keyword-identical?","expr__49207","G__49213","G__49214","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4451__auto__","cljs.core/seq","cljs.core/MapEntry","this__4438__auto__","this__4444__auto__","entry__4445__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","rewrite-clj.node.whitespace/WhitespaceNode","this__4482__auto__","cljs.core/List","writer__4483__auto__","cljs.core/-write","G__49159","extmap__4478__auto__","G__49217","cljs.core/record?","rewrite-clj.node.whitespace/->WhitespaceNode","rewrite-clj.node.whitespace/map->WhitespaceNode","_","js/Error","this","k49219","G__49224","newlines","p__49225","vec__49226","G__49218","fexpr__49229","this49221","other49222","pred__49246","expr__49247","G__49249","G__49250","rewrite-clj.node.whitespace/NewlineNode","G__49223","G__49252","rewrite-clj.node.whitespace/->NewlineNode","rewrite-clj.node.whitespace/map->NewlineNode","rewrite-clj.node.whitespace/whitespace-node","s","rewrite-clj.node.whitespace/newline-node","rewrite-clj.node.whitespace/newline?","c","rewrite-clj.node.whitespace/whitespace-nodes","cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","char-seq","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/str","cljs.core/first","rewrite-clj.node.whitespace/spaces","n","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","rewrite-clj.node.whitespace/newlines","comma","rewrite-clj.node.whitespace/comma-separated","nodes","cljs.core/butlast","cljs.core.interleave.cljs$core$IFn$_invoke$arity$2","cljs.core.repeat.cljs$core$IFn$_invoke$arity$1","nl","rewrite-clj.node.whitespace/line-separated","space","rewrite-clj.node.whitespace/space-separated","rewrite-clj.node.whitespace/whitespace?","node","rewrite-clj.node.protocols/tag","rewrite-clj.node.whitespace/linebreak?"]]],"~:cache-keys",["~#cmap",[["^19","goog/dom/tagname.js"],[1573417071133,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^N",[]],"~:deps-syms",["^X","~$goog.dom.HtmlElement"]]],["^19","goog/math/math.js"],[1573417071133,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X","~$goog.array","~$goog.asserts"]]],["^19","goog/html/trustedtypes.js"],[1573417071133,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X"]]],["^19","goog/labs/useragent/browser.js"],[1573417071133,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X","^1K","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^19","goog/html/safeurl.js"],[1573417071133,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X","^1L","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^1O"]]],["^19","goog/array/array.js"],[1573417071133,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X","^1L"]]],["^19","goog/debug/error.js"],[1573417071133,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X"]]],["^19","goog/dom/nodetype.js"],[1573417071133,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X"]]],["^19","goog/string/typedstring.js"],[1573417071133,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X"]]],["^19","goog/object/object.js"],[1573417071133,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X"]]],["^19","goog/dom/asserts.js"],[1573417071133,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X","^1L"]]],"~:SHADOW-TIMESTAMP",[1577302212000,1574477009000],["^19","goog/math/long.js"],[1573417071133,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X","^1L","~$goog.reflect"]]],["^19","goog/html/trustedresourceurl.js"],[1573417071133,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X","^1L","~$goog.html.trustedtypes","^1R","^1S","^1T","^1U"]]],["^19","goog/string/internal.js"],[1573417071133,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X"]]],["^19","goog/functions/functions.js"],[1573417071133,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X"]]],["^19","goog/html/safestyle.js"],[1573417071133,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X","^1K","^1L","~$goog.html.SafeUrl","^1T","^1U","^1O"]]],["^19","goog/dom/safe.js"],[1573417071133,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X","^1L","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^1Y","^1Q","~$goog.html.uncheckedconversions","^1T","^1O"]]],["^19","goog/structs/map.js"],[1573417071133,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^19","goog/html/safehtml.js"],[1573417071133,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X","^1K","^1L","~$goog.dom.TagName","~$goog.dom.tags","^21","^22","~$goog.html.SafeStyleSheet","^1Y","^1Q","^1X","^1R","^1S","~$goog.labs.userAgent.browser","^1N","^1T","^1U","^1O"]]],["^19","goog/dom/tags.js"],[1573417071133,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X","^1N"]]],["^19","goog/asserts/asserts.js"],[1573417071133,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^19","goog/uri/uri.js"],[1573417071133,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X","^1K","^1L","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^19","goog/i18n/bidi.js"],[1573417071133,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X"]]],["^19","rewrite_clj/node/protocols.cljs"],[1568862518445,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X","^W","~$clojure.string"]]],["^19","goog/fs/url.js"],[1573417071133,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X"]]],["^19","goog/base.js"],[1573417071133,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",[]]],["^19","goog/structs/structs.js"],[1573417071133,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X","^1K","^1N"]]],["^19","rewrite_clj/node/whitespace.cljs"],[1568862518445,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X","^W","^U"]]],["^19","clojure/string.cljs"],[1574477009594,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X","^W","^2<","~$goog.string.StringBuffer"]]],["^19","goog/string/string.js"],[1573417071133,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X","~$goog.dom.safe","^23","^1T","^1O"]]],["^19","goog/reflect/reflect.js"],[1573417071133,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X"]]],["^19","goog/labs/useragent/util.js"],[1573417071133,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X","^1O"]]],["^19","goog/string/stringbuffer.js"],[1573417071133,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X"]]],["^19","goog/iter/iter.js"],[1573417071133,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X","^1K","^1L","^1[","~$goog.math"]]],["^19","goog/html/uncheckedconversions.js"],[1573417071133,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X","^1L","^20","^21","^22","^28","^1Y","^1Q","^1T","^1O"]]],["^19","goog/dom/htmlelement.js"],[1573417071133,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X"]]],["^19","cljs/core.cljs"],[1574477009594,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["~$goog.math.Long","~$goog.math.Integer","^2<","^1N","^1K","~$goog.Uri","^2C"]]],["^19","goog/html/safescript.js"],[1573417071133,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X","^1L","^1X","^1T","^1U"]]],["^19","goog/html/safestylesheet.js"],[1573417071133,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X","^1K","^1L","^22","^1N","^1T","^1U","^1O"]]],["^19","goog/math/integer.js"],[1573417071133,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X","^1W"]]],["^19","goog/uri/utils.js"],[1573417071133,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X","^1K","^1L","^2<"]]],["^19","goog/string/const.js"],[1573417071133,"^1F",["^ ","^1G",null,"^1H",["^N",[]],"^1I",["^X","^1L","^1U"]]]]],"~:clj-info",["^ ","jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/env.cljc",1574477009000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/util.cljc",1574477009000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1559507883000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/core.cljc",1574477009000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/tagged_literals.cljc",1574477009000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1559507883000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/externs.clj",1574477009000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1559507883000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map.clj",1574477009000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64_vlq.clj",1574477009000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1559507883000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64.clj",1574477009000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/binaryage/devtools/0.9.11/devtools-0.9.11.jar!/devtools/defaults.clj",1574477010000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/compiler.cljc",1574477009000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1556312825000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/js_deps.cljc",1574477009000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/analyzer.cljc",1574477009000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1559507883000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",1,"^8",5,"^9",1,"^:",32],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K"],"^L",null,"^M",["^N",[]],"^O","^P","^S",null,"^T",["^ ","^U","^U","^V","^U","^W","^W","^X","^X"],"^Y",["^N",["^Z"]],"~:shadow/js-access-global",["^N",["Error"]],"^[",null,"~:defs",["^ ","~$->NewlineNode",["^ ","~:protocol-inline",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^:",23,"^8",12,"~:internal-ctor",true,"~:factory","~:positional","^7",41,"^9",41,"~:arglists",["^12",["~$quote",["^12",[["~$newlines"]]]]],"~:doc","Positional factory function for rewrite-clj.node.whitespace/NewlineNode."],"^O","~$rewrite-clj.node.whitespace/->NewlineNode","^6","rewrite_clj/node/whitespace.cljs","^:",23,"~:method-params",["^12",[["^3A"]]],"~:protocol-impl",null,"~:arglists-meta",["^12",[null,null]],"^8",1,"^3<",true,"~:variadic?",false,"^3=","^3>","^7",41,"~:ret-tag","~$rewrite-clj.node.whitespace/NewlineNode","^9",41,"~:max-fixed-arity",1,"~:fn-var",true,"^3?",["^12",["^3@",["^12",[["^3A"]]]]],"^3B","Positional factory function for rewrite-clj.node.whitespace/NewlineNode."],"~$WhitespaceNode",["^ ","~:num-fields",1,"~:protocols",["^N",["~$cljs.core/IRecord","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/Object","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$rewrite-clj.node.protocols/Node","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^O","~$rewrite-clj.node.whitespace/WhitespaceNode","^6","rewrite_clj/node/whitespace.cljs","^:",26,"~:type",true,"^8",12,"^3<",true,"^7",29,"~:record",true,"^9",29,"~:tag","~$function","~:skip-protocol-flag",["^N",["^3O","^3P","^3Q","^3R","^3S","^3U","^3V","^3W","^3X","^3Y","^3Z","^40","^41","^42","^43"]]],"~$whitespace?",["^ ","^3;",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",120,"^8",7,"^9",120,"^:",18,"^3?",["^12",["^3@",["^12",[["^V"]]]]],"^3B","Check whether a node represents whitespace."],"^O","~$rewrite-clj.node.whitespace/whitespace?","^6","rewrite_clj/node/whitespace.cljs","^:",18,"^3D",["^12",[["^V"]]],"^3E",null,"^3F",["^12",[null,null]],"^8",1,"^3G",false,"^7",120,"^3H","~$boolean","^9",120,"^3J",1,"^3K",true,"^3?",["^12",["^3@",["^12",[["^V"]]]]],"^3B","Check whether a node represents whitespace."],"~$whitespace-node",["^ ","^3;",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",60,"^8",7,"^9",60,"^:",22,"^3?",["^12",["^3@",["^12",[["~$s"]]]]],"^3B","Create whitespace node."],"^O","~$rewrite-clj.node.whitespace/whitespace-node","^6","rewrite_clj/node/whitespace.cljs","^:",22,"^3D",["^12",[["~$s"]]],"^3E",null,"^3F",["^12",[null,null]],"^8",1,"^3G",false,"^7",60,"^3H","^44","^9",60,"^3J",1,"^3K",true,"^3?",["^12",["^3@",["^12",[["~$s"]]]]],"^3B","Create whitespace node."],"~$space-separated",["^ ","^3;",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",113,"^8",9,"^9",113,"^:",24,"^3?",["^12",["^3@",["^12",[["~$nodes"]]]]],"^3B","Interleave the given seq of nodes with `\" \"` nodes."],"^O","~$rewrite-clj.node.whitespace/space-separated","^6","rewrite_clj/node/whitespace.cljs","^:",24,"^3D",["^12",[["^4@"]]],"^3E",null,"^3F",["^12",[null,null]],"^8",3,"^3G",false,"^7",113,"^3H","~$seq","^9",113,"^3J",1,"^3K",true,"^3?",["^12",["^3@",["^12",[["^4@"]]]]],"^3B","Interleave the given seq of nodes with `\" \"` nodes."],"~$linebreak?",["^ ","^3;",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",128,"^8",7,"^9",128,"^:",17,"^3?",["^12",["^3@",["^12",[["^V"]]]]],"^3B","Check whether a ndoe represents linebreaks."],"^O","~$rewrite-clj.node.whitespace/linebreak?","^6","rewrite_clj/node/whitespace.cljs","^:",17,"^3D",["^12",[["^V"]]],"^3E",null,"^3F",["^12",[null,null]],"^8",1,"^3G",false,"^7",128,"^3H","^4<","^9",128,"^3J",1,"^3K",true,"^3?",["^12",["^3@",["^12",[["^V"]]]]],"^3B","Check whether a ndoe represents linebreaks."],"~$*count-fn*",["^ ","^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",10,"^8",16,"^9",10,"^:",26,"~:dynamic",true],"^O","~$rewrite-clj.node.whitespace/*count-fn*","^6","rewrite_clj/node/whitespace.cljs","^:",26,"^8",1,"^4F",true,"^7",10,"^9",10,"^47","~$any","^3B","This function is applied to every newline string and should produce\n   the eventual character count."],"~$comma-separated",["^ ","^3;",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",101,"^8",9,"^9",101,"^:",24,"^3?",["^12",["^3@",["^12",[["^4@"]]]]],"^3B","Interleave the given seq of nodes with `\", \"` nodes."],"^O","~$rewrite-clj.node.whitespace/comma-separated","^6","rewrite_clj/node/whitespace.cljs","^:",24,"^3D",["^12",[["^4@"]]],"^3E",null,"^3F",["^12",[null,null]],"^8",3,"^3G",false,"^7",101,"^3H","^4B","^9",101,"^3J",1,"^3K",true,"^3?",["^12",["^3@",["^12",[["^4@"]]]]],"^3B","Interleave the given seq of nodes with `\", \"` nodes."],"~$map->WhitespaceNode",["^ ","^3;",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^:",26,"^8",12,"^3<",true,"^3=","~:map","^7",29,"^9",29,"^3?",["^12",["^3@",["^12",[["~$G__49159"]]]]],"^3B","Factory function for rewrite-clj.node.whitespace/WhitespaceNode, taking a map of keywords to field values."],"^O","~$rewrite-clj.node.whitespace/map->WhitespaceNode","^6","rewrite_clj/node/whitespace.cljs","^:",26,"^3D",["^12",[["^4M"]]],"^3E",null,"^3F",["^12",[null,null]],"^8",1,"^3<",true,"^3G",false,"^3=","^4L","^7",29,"^3H","^44","^9",29,"^3J",1,"^3K",true,"^3?",["^12",["^3@",["^12",[["^4M"]]]]],"^3B","Factory function for rewrite-clj.node.whitespace/WhitespaceNode, taking a map of keywords to field values."],"^3A",["^ ","^3;",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",93,"^8",7,"^9",93,"^:",15,"^3?",["^12",["^3@",["^12",[["~$n"]]]]],"^3B","Create node representing the given number of newline characters."],"^O","~$rewrite-clj.node.whitespace/newlines","^6","rewrite_clj/node/whitespace.cljs","^:",15,"^3D",["^12",[["~$n"]]],"^3E",null,"^3F",["^12",[null,null]],"^8",1,"^3G",false,"^7",93,"^3H","^3I","^9",93,"^3J",1,"^3K",true,"^3?",["^12",["^3@",["^12",[["~$n"]]]]],"^3B","Create node representing the given number of newline characters."],"~$whitespace-nodes",["^ ","^3;",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",75,"^8",7,"^9",75,"^:",23,"^3?",["^12",["^3@",["^12",[["~$s"]]]]],"^3B","Convert a string of whitespace to whitespace/newline nodes."],"^O","~$rewrite-clj.node.whitespace/whitespace-nodes","^6","rewrite_clj/node/whitespace.cljs","^:",23,"^3D",["^12",[["~$s"]]],"^3E",null,"^3F",["^12",[null,null]],"^8",1,"^3G",false,"^7",75,"^3H","~$cljs.core/LazySeq","^9",75,"^3J",1,"^3K",true,"^3?",["^12",["^3@",["^12",[["~$s"]]]]],"^3B","Convert a string of whitespace to whitespace/newline nodes."],"~$NewlineNode",["^ ","^3M",1,"^3N",["^N",["^3O","^3P","^3Q","^3R","^3S","^3T","^3U","^3V","^3W","^3X","^3Y","^3Z","^3[","^40","^41","^42","^43"]],"^O","^3I","^6","rewrite_clj/node/whitespace.cljs","^:",23,"^45",true,"^8",12,"^3<",true,"^7",41,"^46",true,"^9",41,"^47","^48","^49",["^N",["^3O","^3P","^3Q","^3R","^3S","^3U","^3V","^3W","^3X","^3Y","^3Z","^40","^41","^42","^43"]]],"~$newline-node",["^ ","^3;",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",65,"^8",7,"^9",65,"^:",19,"^3?",["^12",["^3@",["^12",[["~$s"]]]]],"^3B","Create newline node."],"^O","~$rewrite-clj.node.whitespace/newline-node","^6","rewrite_clj/node/whitespace.cljs","^:",19,"^3D",["^12",[["~$s"]]],"^3E",null,"^3F",["^12",[null,null]],"^8",1,"^3G",false,"^7",65,"^3H","^3I","^9",65,"^3J",1,"^3K",true,"^3?",["^12",["^3@",["^12",[["~$s"]]]]],"^3B","Create newline node."],"~$*newline-fn*",["^ ","^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",6,"^8",16,"^9",6,"^:",28,"^4F",true],"^O","~$rewrite-clj.node.whitespace/*newline-fn*","^6","rewrite_clj/node/whitespace.cljs","^:",28,"^8",1,"^4F",true,"^7",6,"^9",6,"^47","^4H","^3B","This function is applied to every newline string."],"~$newline?",["^ ","^3;",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",70,"^8",8,"^9",70,"^:",16,"~:private",true,"^3?",["^12",["^3@",["^12",[["~$c"]]]]],"^3B","Check whether a character represents a linebreak."],"^4Y",true,"^O","~$rewrite-clj.node.whitespace/newline?","^6","rewrite_clj/node/whitespace.cljs","^:",16,"^3D",["^12",[["~$c"]]],"^3E",null,"^3F",["^12",[null,null]],"^8",1,"^3G",false,"^7",70,"^3H","^4<","^9",70,"^3J",1,"^3K",true,"^3?",["^12",["^3@",["^12",[["~$c"]]]]],"^3B","Check whether a character represents a linebreak."],"~$->WhitespaceNode",["^ ","^3;",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^:",26,"^8",12,"^3<",true,"^3=","^3>","^7",29,"^9",29,"^3?",["^12",["^3@",["^12",[["~$whitespace"]]]]],"^3B","Positional factory function for rewrite-clj.node.whitespace/WhitespaceNode."],"^O","~$rewrite-clj.node.whitespace/->WhitespaceNode","^6","rewrite_clj/node/whitespace.cljs","^:",26,"^3D",["^12",[["^50"]]],"^3E",null,"^3F",["^12",[null,null]],"^8",1,"^3<",true,"^3G",false,"^3=","^3>","^7",29,"^3H","^44","^9",29,"^3J",1,"^3K",true,"^3?",["^12",["^3@",["^12",[["^50"]]]]],"^3B","Positional factory function for rewrite-clj.node.whitespace/WhitespaceNode."],"~$spaces",["^ ","^3;",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",88,"^8",7,"^9",88,"^:",13,"^3?",["^12",["^3@",["^12",[["~$n"]]]]],"^3B","Create node representing the given number of spaces."],"^O","~$rewrite-clj.node.whitespace/spaces","^6","rewrite_clj/node/whitespace.cljs","^:",13,"^3D",["^12",[["~$n"]]],"^3E",null,"^3F",["^12",[null,null]],"^8",1,"^3G",false,"^7",88,"^3H","^44","^9",88,"^3J",1,"^3K",true,"^3?",["^12",["^3@",["^12",[["~$n"]]]]],"^3B","Create node representing the given number of spaces."],"~$map->NewlineNode",["^ ","^3;",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^:",23,"^8",12,"^3<",true,"^3=","^4L","^7",41,"^9",41,"^3?",["^12",["^3@",["^12",[["~$G__49223"]]]]],"^3B","Factory function for rewrite-clj.node.whitespace/NewlineNode, taking a map of keywords to field values."],"^O","~$rewrite-clj.node.whitespace/map->NewlineNode","^6","rewrite_clj/node/whitespace.cljs","^:",23,"^3D",["^12",[["^55"]]],"^3E",null,"^3F",["^12",[null,null]],"^8",1,"^3<",true,"^3G",false,"^3=","^4L","^7",41,"^3H","^3I","^9",41,"^3J",1,"^3K",true,"^3?",["^12",["^3@",["^12",[["^55"]]]]],"^3B","Factory function for rewrite-clj.node.whitespace/NewlineNode, taking a map of keywords to field values."],"~$line-separated",["^ ","^3;",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",107,"^8",9,"^9",107,"^:",23,"^3?",["^12",["^3@",["^12",[["^4@"]]]]],"^3B","Interleave the given seq of nodes with newline nodes."],"^O","~$rewrite-clj.node.whitespace/line-separated","^6","rewrite_clj/node/whitespace.cljs","^:",23,"^3D",["^12",[["^4@"]]],"^3E",null,"^3F",["^12",[null,null]],"^8",3,"^3G",false,"^7",107,"^3H","^4B","^9",107,"^3J",1,"^3K",true,"^3?",["^12",["^3@",["^12",[["^4@"]]]]],"^3B","Interleave the given seq of nodes with newline nodes."]],"^10",["^ ","^W","^W"],"~:cljs.analyzer/constants",["^ ","^Y",["^N",["~:newlines","~:whitespace","^3A","^50","~:newline"]],"~:order",["^5;","^50","^5:","^5<","^3A"]],"^15",["^ ","^Z",["^N",[]]],"^16",["^ "],"^17",["^X","^W","^U"]],"^R","^P","~:ns-specs",["^ "],"~:ns-spec-vars",["^N",[]],"~:compiler-options",["^1E",[["^5@","~:static-fns"],true,["^5@","~:shadow-tweaks"],null,["^5@","~:elide-asserts"],false,["^5@","~:optimize-constants"],null,["^5@","^1<"],null,["^5@","~:external-config"],null,["^5@","~:tooling-config"],null,["^5@","~:emit-constants"],null,["^5@","~:load-tests"],null,["^5@","~:form-size-threshold"],null,["^5@","~:infer-externs"],true,["^5@","^1>"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^5@","~:fn-invoke-direct"],null,["^5@","~:source-map"],"/dev/null"]]]