["^ ","~:output",["^ ","~:js","goog.provide('re_frame.core');\ngoog.require('cljs.core');\ngoog.require('re_frame.events');\ngoog.require('re_frame.subs');\ngoog.require('re_frame.interop');\ngoog.require('re_frame.db');\ngoog.require('re_frame.fx');\ngoog.require('re_frame.cofx');\ngoog.require('re_frame.router');\ngoog.require('re_frame.loggers');\ngoog.require('re_frame.registrar');\ngoog.require('re_frame.interceptor');\ngoog.require('re_frame.std_interceptors');\ngoog.require('clojure.set');\nre_frame.core.dispatch = re_frame.router.dispatch;\nre_frame.core.dispatch_sync = re_frame.router.dispatch_sync;\nre_frame.core.reg_sub = re_frame.subs.reg_sub;\nre_frame.core.subscribe = re_frame.subs.subscribe;\nre_frame.core.clear_sub = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(re_frame.registrar.clear_handlers,re_frame.subs.kind);\nre_frame.core.clear_subscription_cache_BANG_ = re_frame.subs.clear_subscription_cache_BANG_;\n/**\n * This is a low level, advanced function.  You should probably be\n *   using reg-sub instead.\n *   Docs in https://github.com/Day8/re-frame/blob/master/docs/SubscriptionFlow.md\n */\nre_frame.core.reg_sub_raw = (function re_frame$core$reg_sub_raw(query_id,handler_fn){\nreturn re_frame.registrar.register_handler(re_frame.subs.kind,query_id,handler_fn);\n});\nre_frame.core.reg_fx = re_frame.fx.reg_fx;\nre_frame.core.clear_fx = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(re_frame.registrar.clear_handlers,re_frame.fx.kind);\nre_frame.core.reg_cofx = re_frame.cofx.reg_cofx;\nre_frame.core.inject_cofx = re_frame.cofx.inject_cofx;\nre_frame.core.clear_cofx = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(re_frame.registrar.clear_handlers,re_frame.cofx.kind);\n/**\n * Register the given event `handler` (function) for the given `id`. Optionally, provide\n *   an `interceptors` chain.\n *   `id` is typically a namespaced keyword  (but can be anything)\n *   `handler` is a function: (db event) -> db\n *   `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n *   `handler` is wrapped in its own interceptor and added to the end of the interceptor\n * chain, so that, in the end, only a chain is registered.\n * Special effects and coeffects interceptors are added to the front of this\n * chain.\n */\nre_frame.core.reg_event_db = (function re_frame$core$reg_event_db(var_args){\nvar G__42777 = arguments.length;\nswitch (G__42777) {\ncase 2:\nreturn re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2 = (function (id,handler){\nreturn re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3(id,null,handler);\n}));\n\n(re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3 = (function (id,interceptors,handler){\nreturn re_frame.events.register(id,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [re_frame.cofx.inject_db,re_frame.fx.do_fx,interceptors,re_frame.std_interceptors.db_handler__GT_interceptor(handler)], null));\n}));\n\n(re_frame.core.reg_event_db.cljs$lang$maxFixedArity = 3);\n\n/**\n * Register the given event `handler` (function) for the given `id`. Optionally, provide\n *   an `interceptors` chain.\n *   `id` is typically a namespaced keyword  (but can be anything)\n *   `handler` is a function: (coeffects-map event-vector) -> effects-map\n *   `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n *   `handler` is wrapped in its own interceptor and added to the end of the interceptor\n * chain, so that, in the end, only a chain is registered.\n * Special effects and coeffects interceptors are added to the front of the\n * interceptor chain.  These interceptors inject the value of app-db into coeffects,\n * and, later, action effects.\n */\nre_frame.core.reg_event_fx = (function re_frame$core$reg_event_fx(var_args){\nvar G__42786 = arguments.length;\nswitch (G__42786) {\ncase 2:\nreturn re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2 = (function (id,handler){\nreturn re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3(id,null,handler);\n}));\n\n(re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3 = (function (id,interceptors,handler){\nreturn re_frame.events.register(id,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [re_frame.cofx.inject_db,re_frame.fx.do_fx,interceptors,re_frame.std_interceptors.fx_handler__GT_interceptor(handler)], null));\n}));\n\n(re_frame.core.reg_event_fx.cljs$lang$maxFixedArity = 3);\n\n/**\n * Register the given event `handler` (function) for the given `id`. Optionally, provide\n *   an `interceptors` chain.\n *   `id` is typically a namespaced keyword  (but can be anything)\n *   `handler` is a function: (context-map event-vector) -> context-map\n * \n *   This form of registration is almost never used. \n */\nre_frame.core.reg_event_ctx = (function re_frame$core$reg_event_ctx(var_args){\nvar G__42820 = arguments.length;\nswitch (G__42820) {\ncase 2:\nreturn re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$2 = (function (id,handler){\nreturn re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$3(id,null,handler);\n}));\n\n(re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$3 = (function (id,interceptors,handler){\nreturn re_frame.events.register(id,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [re_frame.cofx.inject_db,re_frame.fx.do_fx,interceptors,re_frame.std_interceptors.ctx_handler__GT_interceptor(handler)], null));\n}));\n\n(re_frame.core.reg_event_ctx.cljs$lang$maxFixedArity = 3);\n\nre_frame.core.clear_event = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(re_frame.registrar.clear_handlers,re_frame.events.kind);\nre_frame.core.debug = re_frame.std_interceptors.debug;\nre_frame.core.path = re_frame.std_interceptors.path;\nre_frame.core.enrich = re_frame.std_interceptors.enrich;\nre_frame.core.trim_v = re_frame.std_interceptors.trim_v;\nre_frame.core.after = re_frame.std_interceptors.after;\nre_frame.core.on_changes = re_frame.std_interceptors.on_changes;\nre_frame.core.__GT_interceptor = re_frame.interceptor.__GT_interceptor;\nre_frame.core.get_coeffect = re_frame.interceptor.get_coeffect;\nre_frame.core.assoc_coeffect = re_frame.interceptor.assoc_coeffect;\nre_frame.core.get_effect = re_frame.interceptor.get_effect;\nre_frame.core.assoc_effect = re_frame.interceptor.assoc_effect;\nre_frame.core.enqueue = re_frame.interceptor.enqueue;\nre_frame.core.set_loggers_BANG_ = re_frame.loggers.set_loggers_BANG_;\nre_frame.core.console = re_frame.loggers.console;\n/**\n * Checkpoints the state of re-frame and returns a function which, when\n *   later called, will restore re-frame to that checkpointed state.\n * \n *   Checkpoint includes app-db, all registered handlers and all subscriptions.\n *   \n */\nre_frame.core.make_restore_fn = (function re_frame$core$make_restore_fn(){\nvar handlers = cljs.core.deref(re_frame.registrar.kind__GT_id__GT_handler);\nvar app_db = cljs.core.deref(re_frame.db.app_db);\nvar subs_cache = cljs.core.deref(re_frame.subs.query__GT_reaction);\nreturn (function (){\nvar original_subs_42961 = cljs.core.set(cljs.core.vals(subs_cache));\nvar current_subs_42962 = cljs.core.set(cljs.core.vals(cljs.core.deref(re_frame.subs.query__GT_reaction)));\nvar seq__42835_42963 = cljs.core.seq(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(current_subs_42962,original_subs_42961));\nvar chunk__42836_42964 = null;\nvar count__42837_42965 = (0);\nvar i__42838_42966 = (0);\nwhile(true){\nif((i__42838_42966 < count__42837_42965)){\nvar sub_42967 = chunk__42836_42964.cljs$core$IIndexed$_nth$arity$2(null,i__42838_42966);\nre_frame.interop.dispose_BANG_(sub_42967);\n\n\nvar G__42968 = seq__42835_42963;\nvar G__42969 = chunk__42836_42964;\nvar G__42970 = count__42837_42965;\nvar G__42971 = (i__42838_42966 + (1));\nseq__42835_42963 = G__42968;\nchunk__42836_42964 = G__42969;\ncount__42837_42965 = G__42970;\ni__42838_42966 = G__42971;\ncontinue;\n} else {\nvar temp__5735__auto___42973 = cljs.core.seq(seq__42835_42963);\nif(temp__5735__auto___42973){\nvar seq__42835_42974__$1 = temp__5735__auto___42973;\nif(cljs.core.chunked_seq_QMARK_(seq__42835_42974__$1)){\nvar c__4609__auto___42975 = cljs.core.chunk_first(seq__42835_42974__$1);\nvar G__42977 = cljs.core.chunk_rest(seq__42835_42974__$1);\nvar G__42978 = c__4609__auto___42975;\nvar G__42979 = cljs.core.count(c__4609__auto___42975);\nvar G__42980 = (0);\nseq__42835_42963 = G__42977;\nchunk__42836_42964 = G__42978;\ncount__42837_42965 = G__42979;\ni__42838_42966 = G__42980;\ncontinue;\n} else {\nvar sub_42981 = cljs.core.first(seq__42835_42974__$1);\nre_frame.interop.dispose_BANG_(sub_42981);\n\n\nvar G__42982 = cljs.core.next(seq__42835_42974__$1);\nvar G__42983 = null;\nvar G__42984 = (0);\nvar G__42985 = (0);\nseq__42835_42963 = G__42982;\nchunk__42836_42964 = G__42983;\ncount__42837_42965 = G__42984;\ni__42838_42966 = G__42985;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\ncljs.core.reset_BANG_(re_frame.registrar.kind__GT_id__GT_handler,handlers);\n\ncljs.core.reset_BANG_(re_frame.db.app_db,app_db);\n\nreturn null;\n});\n});\n/**\n * Remove all events queued for processing\n */\nre_frame.core.purge_event_queue = (function re_frame$core$purge_event_queue(){\nreturn re_frame.router.event_queue.re_frame$router$IEventQueue$purge$arity$1(null);\n});\n/**\n * Registers a function `f` to be called after each event is processed\n * `f` will be called with two arguments:\n *  - `event`: a vector. The event just processed.\n *  - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n * \n * This is useful in advanced cases like:\n *   - you are implementing a complex bootstrap pipeline\n *   - you want to create your own handling infrastructure, with perhaps multiple\n *     handlers for the one event, etc.  Hook in here.\n *   - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n * \n *   'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\n *   be used at \"remove time\" to get rid of the right callback.\n *   \n */\nre_frame.core.add_post_event_callback = (function re_frame$core$add_post_event_callback(var_args){\nvar G__42881 = arguments.length;\nswitch (G__42881) {\ncase 1:\nreturn re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$1 = (function (f){\nreturn re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$2(f,f);\n}));\n\n(re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$2 = (function (id,f){\nreturn re_frame.router.event_queue.re_frame$router$IEventQueue$add_post_event_callback$arity$3(null,id,f);\n}));\n\n(re_frame.core.add_post_event_callback.cljs$lang$maxFixedArity = 2);\n\nre_frame.core.remove_post_event_callback = (function re_frame$core$remove_post_event_callback(id){\nreturn re_frame.router.event_queue.re_frame$router$IEventQueue$remove_post_event_callback$arity$2(null,id);\n});\nre_frame.core.register_handler = (function re_frame$core$register_handler(var_args){\nvar args__4795__auto__ = [];\nvar len__4789__auto___42992 = arguments.length;\nvar i__4790__auto___42993 = (0);\nwhile(true){\nif((i__4790__auto___42993 < len__4789__auto___42992)){\nargs__4795__auto__.push((arguments[i__4790__auto___42993]));\n\nvar G__42994 = (i__4790__auto___42993 + (1));\ni__4790__auto___42993 = G__42994;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4796__auto__ = ((((0) < args__4795__auto__.length))?(new cljs.core.IndexedSeq(args__4795__auto__.slice((0)),(0),null)):null);\nreturn re_frame.core.register_handler.cljs$core$IFn$_invoke$arity$variadic(argseq__4796__auto__);\n});\n\n(re_frame.core.register_handler.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar G__42889_42999 = new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552);\nvar G__42890_43000 = \"re-frame:  \\\"register-handler\\\" has been renamed \\\"reg-event-db\\\" (look for registration of\";\nvar G__42891_43001 = cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(args));\nvar G__42892_43002 = \")\";\n(re_frame.core.console.cljs$core$IFn$_invoke$arity$4 ? re_frame.core.console.cljs$core$IFn$_invoke$arity$4(G__42889_42999,G__42890_43000,G__42891_43001,G__42892_43002) : re_frame.core.console.call(null,G__42889_42999,G__42890_43000,G__42891_43001,G__42892_43002));\n\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(re_frame.core.reg_event_db,args);\n}));\n\n(re_frame.core.register_handler.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(re_frame.core.register_handler.cljs$lang$applyTo = (function (seq42882){\nvar self__4777__auto__ = this;\nreturn self__4777__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq42882));\n}));\n\nre_frame.core.register_sub = (function re_frame$core$register_sub(var_args){\nvar args__4795__auto__ = [];\nvar len__4789__auto___43008 = arguments.length;\nvar i__4790__auto___43012 = (0);\nwhile(true){\nif((i__4790__auto___43012 < len__4789__auto___43008)){\nargs__4795__auto__.push((arguments[i__4790__auto___43012]));\n\nvar G__43013 = (i__4790__auto___43012 + (1));\ni__4790__auto___43012 = G__43013;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4796__auto__ = ((((0) < args__4795__auto__.length))?(new cljs.core.IndexedSeq(args__4795__auto__.slice((0)),(0),null)):null);\nreturn re_frame.core.register_sub.cljs$core$IFn$_invoke$arity$variadic(argseq__4796__auto__);\n});\n\n(re_frame.core.register_sub.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar G__42904_43018 = new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552);\nvar G__42905_43019 = \"re-frame:  \\\"register-sub\\\" is deprecated. Use \\\"reg-sub-raw\\\" (look for registration of\";\nvar G__42906_43020 = cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(args));\nvar G__42907_43021 = \")\";\n(re_frame.core.console.cljs$core$IFn$_invoke$arity$4 ? re_frame.core.console.cljs$core$IFn$_invoke$arity$4(G__42904_43018,G__42905_43019,G__42906_43020,G__42907_43021) : re_frame.core.console.call(null,G__42904_43018,G__42905_43019,G__42906_43020,G__42907_43021));\n\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(re_frame.core.reg_sub_raw,args);\n}));\n\n(re_frame.core.register_sub.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(re_frame.core.register_sub.cljs$lang$applyTo = (function (seq42899){\nvar self__4777__auto__ = this;\nreturn self__4777__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq42899));\n}));\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/core.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",18],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$react-flip-move","~$module$node_modules$react_flip_move$dist$react_flip_move_cjs","~$clojure.pprint","~$cljs.pprint","~$clojure.repl","~$cljs.repl","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.core","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$re-frame.interop","^U","~$subs","~$re-frame.subs","~$set","~$clojure.set","~$cofx","~$re-frame.cofx","~$re-frame.interceptor","^10","~$fx","~$re-frame.fx","~$re-frame.events","^13","~$loggers","~$re-frame.loggers","^12","^12","~$re-frame.registrar","^16","~$cljs.core","^17","~$interceptor","^10","~$goog","^19","~$router","~$re-frame.router","~$db","~$re-frame.db","~$registrar","^16","^1;","^1;","^Y","^Y","~$events","^13","~$re-frame.std-interceptors","^1@","^15","^15","^W","^W","~$interop","^U","~$std-interceptors","^1@","^[","^[","^1=","^1="],"~:seen",["^N",["~:require"]],"~:uses",["^ ","~$db-handler->interceptor","^1@","~$fx-handler->interceptor","^1@","~$ctx-handler->interceptor","^1@"],"~:require-macros",["^ ","^17","^17"],"~:form",["~#list",["~$ns","^P",["^1K",["^1D",["^13","~:as","^1?"],["^W","^1M","^V"],["^U","^1M","^1A"],["^1=","^1M","^1<"],["^12","^1M","^11"],["^[","^1M","^Z"],["^1;","^1M","^1:"],["^15","^1M","^14"],["^16","^1M","^1>"],["^10","^1M","^18"],["^1@","^1M","^1B","~:refer",["^1F","^1G","^1H"]],["^Y","^1M","^X"]]]]],"~:flags",["^ ","^1D",["^N",[]]],"~:js-deps",["^ "],"~:deps",["^19","^17","^13","^W","^U","^1=","^12","^[","^1;","^15","^16","^10","^1@","^Y"]],"^R","^P","~:resource-id",["~:shadow.build.classpath/resource","re_frame/core.cljc"],"~:compiled-at",1577462028376,"~:resource-name","re_frame/core.cljc","~:warnings",[],"~:source","(ns re-frame.core\n  (:require\n    [re-frame.events           :as events]\n    [re-frame.subs             :as subs]\n    [re-frame.interop          :as interop]\n    [re-frame.db               :as db]\n    [re-frame.fx               :as fx]\n    [re-frame.cofx             :as cofx]\n    [re-frame.router           :as router]\n    [re-frame.loggers          :as loggers]\n    [re-frame.registrar        :as registrar]\n    [re-frame.interceptor      :as interceptor]\n    [re-frame.std-interceptors :as std-interceptors :refer [db-handler->interceptor\n                                                             fx-handler->interceptor\n                                                             ctx-handler->interceptor]]\n    [clojure.set               :as set]))\n\n\n;; -- API ---------------------------------------------------------------------\n;;\n;; This namespace represents the re-frame API\n;;\n;; Below, you'll see we've used this technique:\n;;   (def  api-name-for-fn    deeper.namespace/where-the-defn-is)\n;;\n;; So, we promote a `defn` in a deeper namespace \"up\" to the API\n;; via a `def` in this namespace.\n;;\n;; Turns out, this approach makes it hard:\n;;   - to auto-generate API docs\n;;   - for IDEs to provide code completion on functions in the API\n;;\n;; Which is annoying. But there are pros and cons and we haven't\n;; yet revisited the decision.  To compensate, we've added more nudity\n;; to the docs.\n;;\n\n\n;; -- dispatch ----------------------------------------------------------------\n(def dispatch       router/dispatch)\n(def dispatch-sync  router/dispatch-sync)\n\n\n;; -- subscriptions -----------------------------------------------------------\n(def reg-sub        subs/reg-sub)\n(def subscribe      subs/subscribe)\n\n(def clear-sub (partial registrar/clear-handlers subs/kind))  ;; think unreg-sub\n(def clear-subscription-cache! subs/clear-subscription-cache!)\n\n(defn reg-sub-raw\n  \"This is a low level, advanced function.  You should probably be\n  using reg-sub instead.\n  Docs in https://github.com/Day8/re-frame/blob/master/docs/SubscriptionFlow.md\"\n  [query-id handler-fn]\n  (registrar/register-handler subs/kind query-id handler-fn))\n\n\n;; -- effects -----------------------------------------------------------------\n(def reg-fx      fx/reg-fx)\n(def clear-fx    (partial registrar/clear-handlers fx/kind))  ;; think unreg-fx\n\n;; -- coeffects ---------------------------------------------------------------\n(def reg-cofx    cofx/reg-cofx)\n(def inject-cofx cofx/inject-cofx)\n(def clear-cofx (partial registrar/clear-handlers cofx/kind)) ;; think unreg-cofx\n\n\n;; -- Events ------------------------------------------------------------------\n\n(defn reg-event-db\n  \"Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of this\n   chain.\"\n  ([id handler]\n    (reg-event-db id nil handler))\n  ([id interceptors handler]\n   (events/register id [cofx/inject-db fx/do-fx interceptors (db-handler->interceptor handler)])))\n\n\n(defn reg-event-fx\n  \"Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (coeffects-map event-vector) -> effects-map\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of the\n   interceptor chain.  These interceptors inject the value of app-db into coeffects,\n   and, later, action effects.\"\n  ([id handler]\n   (reg-event-fx id nil handler))\n  ([id interceptors handler]\n   (events/register id [cofx/inject-db fx/do-fx interceptors (fx-handler->interceptor handler)])))\n\n\n(defn reg-event-ctx\n  \"Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (context-map event-vector) -> context-map\n\n  This form of registration is almost never used. \"\n  ([id handler]\n   (reg-event-ctx id nil handler))\n  ([id interceptors handler]\n   (events/register id [cofx/inject-db fx/do-fx interceptors (ctx-handler->interceptor handler)])))\n\n(def clear-event (partial registrar/clear-handlers events/kind)) ;; think unreg-event-*\n\n;; -- interceptors ------------------------------------------------------------\n\n;; Standard interceptors.\n;; Detailed docs on each in std-interceptors.cljs\n(def debug       std-interceptors/debug)\n(def path        std-interceptors/path)\n(def enrich      std-interceptors/enrich)\n(def trim-v      std-interceptors/trim-v)\n(def after       std-interceptors/after)\n(def on-changes  std-interceptors/on-changes)\n\n\n;; Utility functions for creating your own interceptors\n;;\n;;  (def my-interceptor\n;;     (->interceptor                ;; used to create an interceptor\n;;       :id     :my-interceptor     ;; an id - decorative only\n;;       :before (fn [context]                         ;; you normally want to change :coeffects\n;;                  ... use get-coeffect  and assoc-coeffect\n;;                       )\n;;       :after  (fn [context]                         ;; you normally want to change :effects\n;;                 (let [db (get-effect context :db)]  ;; (get-in context [:effects :db])\n;;                   (assoc-effect context :http-ajax {...}])))))\n;;\n(def ->interceptor   interceptor/->interceptor)\n(def get-coeffect    interceptor/get-coeffect)\n(def assoc-coeffect  interceptor/assoc-coeffect)\n(def get-effect      interceptor/get-effect)\n(def assoc-effect    interceptor/assoc-effect)\n(def enqueue         interceptor/enqueue)\n\n\n;; --  logging ----------------------------------------------------------------\n;; Internally, re-frame uses the logging functions: warn, log, error, group and groupEnd\n;; By default, these functions map directly to the js/console implementations,\n;; but you can override with your own fns (set or subset).\n;; Example Usage:\n;;   (defn my-fn [& args]  (post-it-somewhere (apply str args)))  ;; here is my alternative\n;;   (re-frame.core/set-loggers!  {:warn my-fn :log my-fn})       ;; override the defaults with mine\n(def set-loggers! loggers/set-loggers!)\n\n;; If you are writing an extension to re-frame, like perhaps\n;; an effects handler, you may want to use re-frame logging.\n;;\n;; usage: (console :error \"Oh, dear God, it happened: \" a-var \" and \" another)\n;;        (console :warn \"Possible breach of containment wall at: \" dt)\n(def console loggers/console)\n\n\n;; -- unit testing ------------------------------------------------------------\n\n(defn make-restore-fn\n  \"Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  \"\n  []\n  (let [handlers @registrar/kind->id->handler\n        app-db   @db/app-db\n\t\t\t\tsubs-cache @subs/query->reaction]\n    (fn []\n\t\t\t;; call `dispose!` on all current subscriptions which\n\t\t\t;; didn't originally exist.\n      (let [original-subs (set (vals subs-cache))\n            current-subs  (set (vals @subs/query->reaction))]\n        (doseq [sub (set/difference current-subs original-subs)]\n          (interop/dispose! sub)))\n\n      ;; Reset the atoms\n      ;; We don't need to reset subs/query->reaction, as\n      ;; disposing of the subs removes them from the cache anyway\n      (reset! registrar/kind->id->handler handlers)\n      (reset! db/app-db app-db)\n      nil)))\n\n(defn purge-event-queue\n  \"Remove all events queued for processing\"\n  []\n  (router/purge re-frame.router/event-queue))\n\n;; -- Event Processing Callbacks  ---------------------------------------------\n\n(defn add-post-event-callback\n  \"Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \\\"add time\\\" so it can subsequently\n  be used at \\\"remove time\\\" to get rid of the right callback.\n  \"\n  ([f]\n   (add-post-event-callback f f))   ;; use f as its own identifier\n  ([id f]\n   (router/add-post-event-callback re-frame.router/event-queue id f)))\n\n\n(defn remove-post-event-callback\n  [id]\n  (router/remove-post-event-callback re-frame.router/event-queue id))\n\n\n;; --  Deprecation ------------------------------------------------------------\n;; Assisting the v0.7.x ->  v0.8.x transition.\n(defn register-handler\n  [& args]\n  (console :warn  \"re-frame:  \\\"register-handler\\\" has been renamed \\\"reg-event-db\\\" (look for registration of\" (str (first args)) \")\")\n  (apply reg-event-db args))\n\n(defn register-sub\n  [& args]\n  (console :warn  \"re-frame:  \\\"register-sub\\\" is deprecated. Use \\\"reg-sub-raw\\\" (look for registration of\" (str (first args)) \")\")\n  (apply reg-sub-raw args))\n","~:reader-features",["^N",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["re-frame.core/dispatch","re-frame.router/dispatch","re-frame.core/dispatch-sync","re-frame.router/dispatch-sync","re-frame.core/reg-sub","re-frame.subs/reg-sub","re-frame.core/subscribe","re-frame.subs/subscribe","re-frame.core/clear-sub","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","re-frame.registrar/clear-handlers","re-frame.subs/kind","re-frame.core/clear-subscription-cache!","re-frame.subs/clear-subscription-cache!","re-frame.core/reg-sub-raw","query-id","handler-fn","re-frame.registrar/register-handler","re-frame.core/reg-fx","re-frame.fx/reg-fx","re-frame.core/clear-fx","re-frame.fx/kind","re-frame.core/reg-cofx","re-frame.cofx/reg-cofx","re-frame.core/inject-cofx","re-frame.cofx/inject-cofx","re-frame.core/clear-cofx","re-frame.cofx/kind","var_args","G__42777","re-frame.core/reg-event-db","js/Error","id","handler","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3","interceptors","re-frame.events/register","re-frame.cofx/inject-db","re-frame.fx/do-fx","re-frame.std-interceptors/db-handler->interceptor","G__42786","re-frame.core/reg-event-fx","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3","re-frame.std-interceptors/fx-handler->interceptor","G__42820","re-frame.core/reg-event-ctx","re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$3","re-frame.std-interceptors/ctx-handler->interceptor","re-frame.core/clear-event","re-frame.events/kind","re-frame.core/debug","re-frame.std-interceptors/debug","re-frame.core/path","re-frame.std-interceptors/path","re-frame.core/enrich","re-frame.std-interceptors/enrich","re-frame.core/trim-v","re-frame.std-interceptors/trim-v","re-frame.core/after","re-frame.std-interceptors/after","re-frame.core/on-changes","re-frame.std-interceptors/on-changes","re-frame.core/->interceptor","re-frame.interceptor/->interceptor","re-frame.core/get-coeffect","re-frame.interceptor/get-coeffect","re-frame.core/assoc-coeffect","re-frame.interceptor/assoc-coeffect","re-frame.core/get-effect","re-frame.interceptor/get-effect","re-frame.core/assoc-effect","re-frame.interceptor/assoc-effect","re-frame.core/enqueue","re-frame.interceptor/enqueue","re-frame.core/set-loggers!","re-frame.loggers/set-loggers!","re-frame.core/console","re-frame.loggers/console","re-frame.core/make-restore-fn","cljs.core/deref","handlers","re-frame.registrar/kind->id->handler","app-db","re-frame.db/app-db","subs-cache","re-frame.subs/query->reaction","original-subs","cljs.core/set","cljs.core/vals","current-subs","seq__42835","cljs.core/seq","chunk__42836","count__42837","i__42838","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","sub","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","re-frame.interop/dispose!","cljs.core/reset!","re-frame.core/purge-event-queue","re-frame.router/event-queue","G__42881","re-frame.core/add-post-event-callback","f","re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$2","re-frame.core/remove-post-event-callback","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","re-frame.core/register-handler","seq42882","self__4777__auto__","args","G__42889","G__42890","G__42891","G__42892","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","re-frame.core/register-sub","seq42899","G__42904","G__42905","G__42906","G__42907"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],[1577302212000,1577302212000,1574878438492,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^N",[]],"~:deps-syms",["~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"]]],["^1S","reagent/impl/batching.cljs"],[1558312810021,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^17","~$reagent.debug","~$reagent.interop","~$reagent.impl.util","~$clojure.string"]]],["^1S","goog/dom/tagname.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","~$goog.dom.HtmlElement"]]],["^1S","goog/labs/useragent/platform.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","~$goog.labs.userAgent.util","~$goog.string"]]],["^1S","goog/math/math.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","~$goog.array","~$goog.asserts"]]],["^1S","goog/html/trustedtypes.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19"]]],["^1S","goog/labs/useragent/browser.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^2C","^2A","~$goog.object","~$goog.string.internal"]]],["^1S","goog/html/safeurl.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^2D","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2F"]]],["^1S","re_frame/loggers.cljc"],[1568955171884,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^17","^Y"]]],["^1S","goog/array/array.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^2D"]]],["^24","node_modules/prop-types/checkPropTypes.js"],[1577302212000,1577302212000,1549836454000,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^29","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^1S","reagent/impl/util.cljs"],[1558312810021,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^17","^2<","^2=","^2?"]]],["^1S","goog/useragent/useragent.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^2A","~$goog.reflect","^2B"]]],["^1S","re_frame/router.cljc"],[1568955171884,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^17","^13","^U","^15","~$re-frame.trace"]]],["^24","node_modules/fbjs/lib/emptyFunction.js"],[1577302212000,1577302212000,1528785402000,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^29"]]],["^1S","goog/debug/error.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19"]]],["^1S","re_frame/registrar.cljc"],[1568955171884,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^17","^U","^15"]]],["^24","node_modules/fbjs/lib/emptyObject.js"],[1577302212000,1577302212000,1528785402000,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^29"]]],["^1S","goog/dom/nodetype.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19"]]],["^24","node_modules/scheduler/cjs/scheduler.development.js"],[1577302212000,1577302212000,499162500000,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^29"]]],["^1S","reagent/ratom.cljs"],[1558312810021,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^17","^2>","^2<","~$reagent.impl.batching","^Y"]]],["^24","node_modules/scheduler/cjs/scheduler.production.min.js"],[1577302212000,1577302212000,499162500000,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^29"]]],["^1S","re_frame/interop.cljs"],[1568955171884,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^17","~$goog.async.nextTick","~$reagent.core","~$reagent.ratom"]]],["^1S","goog/string/typedstring.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19"]]],["^24","node_modules/scheduler/cjs/scheduler-tracing.production.min.js"],[1577302212000,1577302212000,499162500000,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^29"]]],["^24","node_modules/create-react-class/factory.js"],[1577302212000,1577302212000,1574878436132,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^29","~$module$node_modules$object_assign$index","~$module$node_modules$fbjs$lib$emptyObject","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$fbjs$lib$warning"]]],["^24","node_modules/react/index.js"],[1577302212000,1577302212000,1574878438250,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^29","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1S","shadow/js.js"],[1577302212298,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19"]]],["^1S","goog/object/object.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19"]]],["^1S","reagent/impl/template.cljs"],[1558312810021,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^17","^?","^2?","~$clojure.walk","^2>","~$reagent.impl.component","^2S","^2V","^2=","^2<"]]],["^1S","goog/dom/asserts.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^2D"]]],["^24","node_modules/react-dom/cjs/react-dom.production.min.js"],[1577302212000,1577302212000,1574878438492,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^29","^?","^2W","~$module$node_modules$scheduler$index"]]],"~:SHADOW-TIMESTAMP",[1577302212000,1574477009000],["^24","node_modules/react/cjs/react.development.js"],[1577302212000,1577302212000,1574878438250,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^29","^2W","~$module$node_modules$prop_types$checkPropTypes"]]],["^1S","re_frame/events.cljc"],[1568955171884,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^17","^1=","~$re-frame.utils","^U","^16","^15","^10","^2R"]]],["^1S","goog/math/long.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^2D","^2Q"]]],["^1S","goog/html/trustedresourceurl.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^2D","~$goog.html.trustedtypes","^2I","^2J","^2K","^2L"]]],["^1S","goog/string/internal.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19"]]],["^24","node_modules/scheduler/cjs/scheduler-tracing.development.js"],[1577302212000,1577302212000,499162500000,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^29"]]],["^24","node_modules/fbjs/lib/warning.js"],[1577302212000,1577302212000,1528785401000,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^29","~$module$node_modules$fbjs$lib$emptyFunction"]]],["^1S","goog/functions/functions.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19"]]],["^1S","goog/html/safestyle.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^2C","^2D","~$goog.html.SafeUrl","^2K","^2L","^2F"]]],["^1S","goog/dom/safe.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^2D","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^39","^2H","~$goog.html.uncheckedconversions","^2K","^2F"]]],["^1S","reagent/impl/component.cljs"],[1558312810021,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^17","^A","^?","^2>","^2S","^2V","^2=","^2<"]]],["^1S","clojure/walk.cljs"],[1574477009594,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^17"]]],["^1S","goog/structs/map.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1S","goog/html/safehtml.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^2C","^2D","~$goog.dom.TagName","~$goog.dom.tags","^3=","^3>","~$goog.html.SafeStyleSheet","^39","^2H","^37","^2I","^2J","^2N","^2E","^2K","^2L","^2F"]]],["^1S","goog/dom/tags.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^2E"]]],["^1S","goog/math/size.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19"]]],["^24","node_modules/scheduler/index.js"],[1577302212000,1577302212000,499162500000,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^29","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development"]]],["^1S","goog/labs/useragent/engine.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^2C","^2A","^2B"]]],["^1S","goog/dom/dom.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^2C","^2D","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^3B","~$goog.dom.safe","^3<","^3?","~$goog.math.Coordinate","~$goog.math.Size","^2E","^2B","~$goog.string.Unicode","~$goog.userAgent"]]],["^1S","goog/asserts/asserts.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","~$goog.debug.Error","^3H"]]],["^1S","goog/uri/uri.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^2C","^2D","^2B","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1S","goog/i18n/bidi.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19"]]],["^24","node_modules/object-assign/index.js"],[1577302212000,1577302212000,1484580833000,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^29"]]],["^1S","re_frame/db.cljc"],[1568955171884,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^17","^U"]]],["^1S","goog/fs/url.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19"]]],["^1S","goog/base.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",[]]],["^1S","goog/structs/structs.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^2C","^2E"]]],["^1S","clojure/string.cljs"],[1574477009594,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^17","^2B","~$goog.string.StringBuffer"]]],["^24","node_modules/create-react-class/index.js"],[1577302212000,1577302212000,1574878436132,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^29","^?","~$module$node_modules$create_react_class$factory"]]],["^1S","re_frame/cofx.cljc"],[1568955171884,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^17","^1=","^10","^16","^15"]]],["^24","node_modules/react/cjs/react.production.min.js"],[1577302212000,1577302212000,1574878438250,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^29","^2W"]]],["^1S","goog/debug/entrypointregistry.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^2D"]]],["^1S","goog/string/string.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^3I","^3?","^2K","^2F"]]],["^1S","re_frame/interceptor.cljc"],[1568955171884,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^17","^15","^U","^2R","^Y"]]],["^1S","clojure/data.cljs"],[1574477009594,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^17","^Y"]]],["^1S","goog/reflect/reflect.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19"]]],["^1S","goog/labs/useragent/util.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^2F"]]],["^1S","reagent/core.cljs"],[1558312810021,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^17","^?","~$reagent.impl.template","^32","^2>","^2S","^2V","^2<","^2=","~$reagent.dom"]]],["^1S","goog/string/stringbuffer.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19"]]],["^1S","goog/math/coordinate.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","~$goog.math"]]],["^1S","re_frame/std_interceptors.cljc"],[1568955171884,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^17","^10","^15","^16","^1=","~$clojure.data","^[","^36","^2R"]]],["^1S","goog/iter/iter.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^2C","^2D","^3;","^3X"]]],["^1S","goog/async/nexttick.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","~$goog.debug.entryPointRegistry","~$goog.dom","^3B","^3I","^3;","^3<","^2H","^2N","^2O","^2K"]]],["^1S","goog/html/uncheckedconversions.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^2D","^3<","^3=","^3>","^3D","^39","^2H","^2K","^2F"]]],["^1S","re_frame/utils.cljc"],[1568955171884,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^17","^15"]]],["^1S","reagent/dom.cljs"],[1558312810021,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^17","^C","^2>","^3V","^2S","^2V","^2<","^2="]]],["^1S","re_frame/fx.cljc"],[1568955171884,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^17","^1;","^1=","^10","^U","^13","^16","^15","^2R"]]],["^24","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1577302212000,1577302212000,1549571078000,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^29"]]],["^1S","reagent/interop.cljs"],[1558312810021,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^17"]]],["^1S","goog/dom/htmlelement.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19"]]],["^1S","cljs/core.cljs"],[1574477009594,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["~$goog.math.Long","~$goog.math.Integer","^2B","^2E","^2C","~$goog.Uri","^3T"]]],["^1S","goog/html/safescript.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^2D","^37","^2K","^2L"]]],["^1S","reagent/debug.cljs"],[1558312810021,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^17"]]],["^1S","goog/html/safestylesheet.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^2C","^2D","^3>","^2E","^2K","^2L","^2F"]]],["^1S","goog/math/integer.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^2Q"]]],["^1S","goog/dom/browserfeature.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^3M"]]],["^24","node_modules/scheduler/tracing.js"],[1577302212000,1577302212000,499162500000,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^29","~$module$node_modules$scheduler$cjs$scheduler_tracing_production_min","~$module$node_modules$scheduler$cjs$scheduler_tracing_development"]]],["^24","node_modules/react-dom/cjs/react-dom.development.js"],[1577302212000,1577302212000,1574878438492,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^29","^?","^2W","^35","^33","~$module$node_modules$scheduler$tracing"]]],["^1S","clojure/set.cljs"],[1574477009594,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^17"]]],["^1S","goog/uri/utils.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^2C","^2D","^2B"]]],["^1S","goog/string/const.js"],[1573417071133,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^2D","^2L"]]],["^24","node_modules/fbjs/lib/invariant.js"],[1577302212000,1577302212000,1528785400000,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^29"]]],["^1S","re_frame/trace.cljc"],[1568955171884,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^17","^U","^15","^3;"]]],["^1S","re_frame/subs.cljc"],[1568955171884,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^17","^1=","^U","^15","^36","^16","^2R"]]],["^1S","re_frame/core.cljc"],[1568955171884,"^25",["^ ","^26",null,"^27",["^N",[]],"^28",["^19","^17","^13","^W","^U","^1=","^12","^[","^1;","^15","^16","^10","^1@","^Y"]]]]],"~:clj-info",["^ ","jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/env.cljc",1574477009000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/util.cljc",1574477009000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1559507883000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/core.cljc",1574477009000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1556141640000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/tagged_literals.cljc",1574477009000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1559507883000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/core.clj",1558312810000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/externs.clj",1574477009000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/interop.clj",1558312810000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1559507883000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map.clj",1574477009000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64_vlq.clj",1574477009000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1559507883000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64.clj",1574477009000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/ratom.clj",1558312810000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/re-frame/re-frame/0.10.9/re-frame-0.10.9.jar!/re_frame/trace.cljc",1568955171000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/compiler.cljc",1574477009000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1556312825000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/js_deps.cljc",1574477009000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/analyzer.cljc",1574477009000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/re-frame/re-frame/0.10.9/re-frame-0.10.9.jar!/re_frame/interop.clj",1568955171000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/debug.clj",1558312810000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1559507883000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/core.cljc","^7",1,"^8",5,"^9",1,"^:",18],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K"],"^L",null,"^M",["^N",[]],"^O","^P","^S",null,"^T",["^ ","^U","^U","^V","^W","^X","^Y","^Z","^[","^10","^10","^11","^12","^13","^13","^14","^15","^12","^12","^16","^16","^17","^17","^18","^10","^19","^19","^1:","^1;","^1<","^1=","^1>","^16","^1;","^1;","^Y","^Y","^1?","^13","^1@","^1@","^15","^15","^W","^W","^1A","^U","^1B","^1@","^[","^[","^1=","^1="],"^1C",["^N",["^1D"]],"~:shadow/js-access-global",["^N",["Error"]],"^1E",["^ ","^1F","^1@","^1G","^1@","^1H","^1@"],"~:defs",["^ ","~$console",["^ ","^O","~$re-frame.core/console","^6","re_frame/core.cljc","^7",164,"^8",1,"^9",164,"^:",13,"^5",["^ ","^6","re_frame/core.cljc","^7",164,"^8",6,"^9",164,"^:",13]],"~$on-changes",["^ ","^O","~$re-frame.core/on-changes","^6","re_frame/core.cljc","^7",127,"^8",1,"^9",127,"^:",16,"^5",["^ ","^6","re_frame/core.cljc","^7",127,"^8",6,"^9",127,"^:",16]],"~$enrich",["^ ","^O","~$re-frame.core/enrich","^6","re_frame/core.cljc","^7",124,"^8",1,"^9",124,"^:",12,"^5",["^ ","^6","re_frame/core.cljc","^7",124,"^8",6,"^9",124,"^:",12]],"~$reg-sub-raw",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/core.cljc","^7",51,"^8",7,"^9",51,"^:",18,"~:arglists",["^1K",["~$quote",["^1K",[["~$query-id","~$handler-fn"]]]]],"~:doc","This is a low level, advanced function.  You should probably be\n  using reg-sub instead.\n  Docs in https://github.com/Day8/re-frame/blob/master/docs/SubscriptionFlow.md"],"^O","~$re-frame.core/reg-sub-raw","^6","re_frame/core.cljc","^:",18,"~:method-params",["^1K",[["^57","^58"]]],"~:protocol-impl",null,"~:arglists-meta",["^1K",[null,null]],"^8",1,"~:variadic?",false,"^7",51,"~:ret-tag","~$any","^9",51,"~:max-fixed-arity",2,"~:fn-var",true,"^55",["^1K",["^56",["^1K",[["^57","^58"]]]]],"^59","This is a low level, advanced function.  You should probably be\n  using reg-sub instead.\n  Docs in https://github.com/Day8/re-frame/blob/master/docs/SubscriptionFlow.md"],"~$subscribe",["^ ","^O","~$re-frame.core/subscribe","^6","re_frame/core.cljc","^7",46,"^8",1,"^9",46,"^:",15,"^5",["^ ","^6","re_frame/core.cljc","^7",46,"^8",6,"^9",46,"^:",15]],"~$assoc-coeffect",["^ ","^O","~$re-frame.core/assoc-coeffect","^6","re_frame/core.cljc","^7",144,"^8",1,"^9",144,"^:",20,"^5",["^ ","^6","re_frame/core.cljc","^7",144,"^8",6,"^9",144,"^:",20]],"~$register-sub",["^ ","^54",null,"^5",["^ ","^6","re_frame/core.cljc","^7",234,"^8",7,"^9",234,"^:",19,"^55",["^1K",["^56",["^1K",[["~$&","~$args"]]]]],"~:top-fn",["^ ","^5>",true,"~:fixed-arity",0,"^5A",0,"^5;",[["^1K",["^5H"]]],"^55",["^1K",[["~$&","^5H"]]],"^5=",["^1K",[null]]]],"^O","~$re-frame.core/register-sub","^6","re_frame/core.cljc","^:",19,"^5I",["^ ","^5>",true,"^5J",0,"^5A",0,"^5;",[["^1K",["^5H"]]],"^55",["^1K",[["~$&","^5H"]]],"^5=",["^1K",[null]]],"^5;",[["^1K",["^5H"]]],"^5<",null,"^5J",0,"^5=",["^1K",[null]],"^8",1,"^5>",true,"~:methods",[["^ ","^5J",0,"^5>",true,"~:tag","^5@"]],"^7",234,"^5?","^5@","^9",234,"^5A",0,"^5B",true,"^55",["^1K",[["~$&","^5H"]]]],"~$purge-event-queue",["^ ","^54",null,"^5",["^ ","^6","re_frame/core.cljc","^7",194,"^8",7,"^9",194,"^:",24,"^55",["^1K",["^56",["^1K",[[]]]]],"^59","Remove all events queued for processing"],"^O","~$re-frame.core/purge-event-queue","^6","re_frame/core.cljc","^:",24,"^5;",["^1K",[[]]],"^5<",null,"^5=",["^1K",[null,null]],"^8",1,"^5>",false,"^7",194,"^5?","^5@","^9",194,"^5A",0,"^5B",true,"^55",["^1K",["^56",["^1K",[[]]]]],"^59","Remove all events queued for processing"],"~$remove-post-event-callback",["^ ","^54",null,"^5",["^ ","^6","re_frame/core.cljc","^7",222,"^8",7,"^9",222,"^:",33,"^55",["^1K",["^56",["^1K",[["~$id"]]]]]],"^O","~$re-frame.core/remove-post-event-callback","^6","re_frame/core.cljc","^:",33,"^5;",["^1K",[["^5Q"]]],"^5<",null,"^5=",["^1K",[null,null]],"^8",1,"^5>",false,"^7",222,"^5?","^5@","^9",222,"^5A",1,"^5B",true,"^55",["^1K",["^56",["^1K",[["^5Q"]]]]]],"~$path",["^ ","^O","~$re-frame.core/path","^6","re_frame/core.cljc","^7",123,"^8",1,"^9",123,"^:",10,"^5",["^ ","^6","re_frame/core.cljc","^7",123,"^8",6,"^9",123,"^:",10]],"~$reg-sub",["^ ","^O","~$re-frame.core/reg-sub","^6","re_frame/core.cljc","^7",45,"^8",1,"^9",45,"^:",13,"^5",["^ ","^6","re_frame/core.cljc","^7",45,"^8",6,"^9",45,"^:",13]],"~$make-restore-fn",["^ ","^54",null,"^5",["^ ","^6","re_frame/core.cljc","^7",169,"^8",7,"^9",169,"^:",22,"^55",["^1K",["^56",["^1K",[[]]]]],"^59","Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  "],"^O","~$re-frame.core/make-restore-fn","^6","re_frame/core.cljc","^:",22,"^5;",["^1K",[[]]],"^5<",null,"^5=",["^1K",[null,null]],"^8",1,"^5>",false,"^7",169,"^5?","~$function","^9",169,"^5A",0,"^5B",true,"^55",["^1K",["^56",["^1K",[[]]]]],"^59","Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  "],"~$clear-fx",["^ ","^O","~$re-frame.core/clear-fx","^6","re_frame/core.cljc","^7",61,"^8",1,"^9",61,"^:",14,"^5",["^ ","^6","re_frame/core.cljc","^7",61,"^8",6,"^9",61,"^:",14],"^5M","^5Y"],"~$get-effect",["^ ","^O","~$re-frame.core/get-effect","^6","re_frame/core.cljc","^7",145,"^8",1,"^9",145,"^:",16,"^5",["^ ","^6","re_frame/core.cljc","^7",145,"^8",6,"^9",145,"^:",16]],"~$reg-event-db",["^ ","^54",null,"^5",["^ ","^6","re_frame/core.cljc","^7",71,"^8",7,"^9",71,"^:",19,"^55",["^1K",["^56",["^1K",[["^5Q","~$handler"],["^5Q","~$interceptors","^63"]]]]],"^59","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of this\n   chain.","^5I",["^ ","^5>",false,"^5J",3,"^5A",3,"^5;",["^1K",[["^5Q","^63"],["^5Q","^64","^63"]]],"^55",["^1K",[["^5Q","^63"],["^5Q","^64","^63"]]],"^5=",["^1K",[null,null]]]],"^O","~$re-frame.core/reg-event-db","^6","re_frame/core.cljc","^:",19,"^5I",["^ ","^5>",false,"^5J",3,"^5A",3,"^5;",["^1K",[["^5Q","^63"],["^5Q","^64","^63"]]],"^55",["^1K",[["^5Q","^63"],["^5Q","^64","^63"]]],"^5=",["^1K",[null,null]]],"^5;",["^1K",[["^5Q","^63"],["^5Q","^64","^63"]]],"^5<",null,"^5J",3,"^5=",["^1K",[null,null]],"^8",1,"^5>",false,"^5L",[["^ ","^5J",2,"^5>",false,"^5M","^5@"],["^ ","^5J",3,"^5>",false,"^5M","^5@"]],"^7",71,"^9",71,"^5A",3,"^5B",true,"^55",["^1K",[["^5Q","^63"],["^5Q","^64","^63"]]],"^59","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of this\n   chain."],"~$dispatch-sync",["^ ","^O","~$re-frame.core/dispatch-sync","^6","re_frame/core.cljc","^7",41,"^8",1,"^9",41,"^:",19,"^5",["^ ","^6","re_frame/core.cljc","^7",41,"^8",6,"^9",41,"^:",19]],"~$clear-event",["^ ","^O","~$re-frame.core/clear-event","^6","re_frame/core.cljc","^7",116,"^8",1,"^9",116,"^:",17,"^5",["^ ","^6","re_frame/core.cljc","^7",116,"^8",6,"^9",116,"^:",17],"^5M","^5Y"],"~$->interceptor",["^ ","^O","~$re-frame.core/->interceptor","^6","re_frame/core.cljc","^7",142,"^8",1,"^9",142,"^:",19,"^5",["^ ","^6","re_frame/core.cljc","^7",142,"^8",6,"^9",142,"^:",19]],"~$set-loggers!",["^ ","^O","~$re-frame.core/set-loggers!","^6","re_frame/core.cljc","^7",157,"^8",1,"^9",157,"^:",18,"^5",["^ ","^6","re_frame/core.cljc","^7",157,"^8",6,"^9",157,"^:",18]],"~$inject-cofx",["^ ","^O","~$re-frame.core/inject-cofx","^6","re_frame/core.cljc","^7",65,"^8",1,"^9",65,"^:",17,"^5",["^ ","^6","re_frame/core.cljc","^7",65,"^8",6,"^9",65,"^:",17]],"~$get-coeffect",["^ ","^O","~$re-frame.core/get-coeffect","^6","re_frame/core.cljc","^7",143,"^8",1,"^9",143,"^:",18,"^5",["^ ","^6","re_frame/core.cljc","^7",143,"^8",6,"^9",143,"^:",18]],"~$debug",["^ ","^O","~$re-frame.core/debug","^6","re_frame/core.cljc","^7",122,"^8",1,"^9",122,"^:",11,"^5",["^ ","^6","re_frame/core.cljc","^7",122,"^8",6,"^9",122,"^:",11],"^5M","~$cljs.core/IMap"],"~$assoc-effect",["^ ","^O","~$re-frame.core/assoc-effect","^6","re_frame/core.cljc","^7",146,"^8",1,"^9",146,"^:",18,"^5",["^ ","^6","re_frame/core.cljc","^7",146,"^8",6,"^9",146,"^:",18]],"~$enqueue",["^ ","^O","~$re-frame.core/enqueue","^6","re_frame/core.cljc","^7",147,"^8",1,"^9",147,"^:",13,"^5",["^ ","^6","re_frame/core.cljc","^7",147,"^8",6,"^9",147,"^:",13]],"~$clear-cofx",["^ ","^O","~$re-frame.core/clear-cofx","^6","re_frame/core.cljc","^7",66,"^8",1,"^9",66,"^:",16,"^5",["^ ","^6","re_frame/core.cljc","^7",66,"^8",6,"^9",66,"^:",16],"^5M","^5Y"],"~$reg-event-ctx",["^ ","^54",null,"^5",["^ ","^6","re_frame/core.cljc","^7",104,"^8",7,"^9",104,"^:",20,"^55",["^1K",["^56",["^1K",[["^5Q","^63"],["^5Q","^64","^63"]]]]],"^59","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (context-map event-vector) -> context-map\n\n  This form of registration is almost never used. ","^5I",["^ ","^5>",false,"^5J",3,"^5A",3,"^5;",["^1K",[["^5Q","^63"],["^5Q","^64","^63"]]],"^55",["^1K",[["^5Q","^63"],["^5Q","^64","^63"]]],"^5=",["^1K",[null,null]]]],"^O","~$re-frame.core/reg-event-ctx","^6","re_frame/core.cljc","^:",20,"^5I",["^ ","^5>",false,"^5J",3,"^5A",3,"^5;",["^1K",[["^5Q","^63"],["^5Q","^64","^63"]]],"^55",["^1K",[["^5Q","^63"],["^5Q","^64","^63"]]],"^5=",["^1K",[null,null]]],"^5;",["^1K",[["^5Q","^63"],["^5Q","^64","^63"]]],"^5<",null,"^5J",3,"^5=",["^1K",[null,null]],"^8",1,"^5>",false,"^5L",[["^ ","^5J",2,"^5>",false,"^5M","^5@"],["^ ","^5J",3,"^5>",false,"^5M","^5@"]],"^7",104,"^9",104,"^5A",3,"^5B",true,"^55",["^1K",[["^5Q","^63"],["^5Q","^64","^63"]]],"^59","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (context-map event-vector) -> context-map\n\n  This form of registration is almost never used. "],"~$reg-fx",["^ ","^O","~$re-frame.core/reg-fx","^6","re_frame/core.cljc","^7",60,"^8",1,"^9",60,"^:",12,"^5",["^ ","^6","re_frame/core.cljc","^7",60,"^8",6,"^9",60,"^:",12]],"~$trim-v",["^ ","^O","~$re-frame.core/trim-v","^6","re_frame/core.cljc","^7",125,"^8",1,"^9",125,"^:",12,"^5",["^ ","^6","re_frame/core.cljc","^7",125,"^8",6,"^9",125,"^:",12],"^5M","^6D"],"~$clear-sub",["^ ","^O","~$re-frame.core/clear-sub","^6","re_frame/core.cljc","^7",48,"^8",1,"^9",48,"^:",15,"^5",["^ ","^6","re_frame/core.cljc","^7",48,"^8",6,"^9",48,"^:",15],"^5M","^5Y"],"~$dispatch",["^ ","^O","~$re-frame.core/dispatch","^6","re_frame/core.cljc","^7",40,"^8",1,"^9",40,"^:",14,"^5",["^ ","^6","re_frame/core.cljc","^7",40,"^8",6,"^9",40,"^:",14]],"~$after",["^ ","^O","~$re-frame.core/after","^6","re_frame/core.cljc","^7",126,"^8",1,"^9",126,"^:",11,"^5",["^ ","^6","re_frame/core.cljc","^7",126,"^8",6,"^9",126,"^:",11]],"~$add-post-event-callback",["^ ","^54",null,"^5",["^ ","^6","re_frame/core.cljc","^7",201,"^8",7,"^9",201,"^:",30,"^55",["^1K",["^56",["^1K",[["~$f"],["^5Q","~$f"]]]]],"^59","Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\n  be used at \"remove time\" to get rid of the right callback.\n  ","^5I",["^ ","^5>",false,"^5J",2,"^5A",2,"^5;",["^1K",[["~$f"],["^5Q","~$f"]]],"^55",["^1K",[["~$f"],["^5Q","~$f"]]],"^5=",["^1K",[null,null]]]],"^O","~$re-frame.core/add-post-event-callback","^6","re_frame/core.cljc","^:",30,"^5I",["^ ","^5>",false,"^5J",2,"^5A",2,"^5;",["^1K",[["~$f"],["^5Q","~$f"]]],"^55",["^1K",[["~$f"],["^5Q","~$f"]]],"^5=",["^1K",[null,null]]],"^5;",["^1K",[["~$f"],["^5Q","~$f"]]],"^5<",null,"^5J",2,"^5=",["^1K",[null,null]],"^8",1,"^5>",false,"^5L",[["^ ","^5J",1,"^5>",false,"^5M","^5@"],["^ ","^5J",2,"^5>",false,"^5M","^5@"]],"^7",201,"^9",201,"^5A",2,"^5B",true,"^55",["^1K",[["~$f"],["^5Q","~$f"]]],"^59","Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\n  be used at \"remove time\" to get rid of the right callback.\n  "],"~$reg-cofx",["^ ","^O","~$re-frame.core/reg-cofx","^6","re_frame/core.cljc","^7",64,"^8",1,"^9",64,"^:",14,"^5",["^ ","^6","re_frame/core.cljc","^7",64,"^8",6,"^9",64,"^:",14]],"~$reg-event-fx",["^ ","^54",null,"^5",["^ ","^6","re_frame/core.cljc","^7",87,"^8",7,"^9",87,"^:",19,"^55",["^1K",["^56",["^1K",[["^5Q","^63"],["^5Q","^64","^63"]]]]],"^59","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (coeffects-map event-vector) -> effects-map\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of the\n   interceptor chain.  These interceptors inject the value of app-db into coeffects,\n   and, later, action effects.","^5I",["^ ","^5>",false,"^5J",3,"^5A",3,"^5;",["^1K",[["^5Q","^63"],["^5Q","^64","^63"]]],"^55",["^1K",[["^5Q","^63"],["^5Q","^64","^63"]]],"^5=",["^1K",[null,null]]]],"^O","~$re-frame.core/reg-event-fx","^6","re_frame/core.cljc","^:",19,"^5I",["^ ","^5>",false,"^5J",3,"^5A",3,"^5;",["^1K",[["^5Q","^63"],["^5Q","^64","^63"]]],"^55",["^1K",[["^5Q","^63"],["^5Q","^64","^63"]]],"^5=",["^1K",[null,null]]],"^5;",["^1K",[["^5Q","^63"],["^5Q","^64","^63"]]],"^5<",null,"^5J",3,"^5=",["^1K",[null,null]],"^8",1,"^5>",false,"^5L",[["^ ","^5J",2,"^5>",false,"^5M","^5@"],["^ ","^5J",3,"^5>",false,"^5M","^5@"]],"^7",87,"^9",87,"^5A",3,"^5B",true,"^55",["^1K",[["^5Q","^63"],["^5Q","^64","^63"]]],"^59","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (coeffects-map event-vector) -> effects-map\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of the\n   interceptor chain.  These interceptors inject the value of app-db into coeffects,\n   and, later, action effects."],"~$register-handler",["^ ","^54",null,"^5",["^ ","^6","re_frame/core.cljc","^7",229,"^8",7,"^9",229,"^:",23,"^55",["^1K",["^56",["^1K",[["~$&","^5H"]]]]],"^5I",["^ ","^5>",true,"^5J",0,"^5A",0,"^5;",[["^1K",["^5H"]]],"^55",["^1K",[["~$&","^5H"]]],"^5=",["^1K",[null]]]],"^O","~$re-frame.core/register-handler","^6","re_frame/core.cljc","^:",23,"^5I",["^ ","^5>",true,"^5J",0,"^5A",0,"^5;",[["^1K",["^5H"]]],"^55",["^1K",[["~$&","^5H"]]],"^5=",["^1K",[null]]],"^5;",[["^1K",["^5H"]]],"^5<",null,"^5J",0,"^5=",["^1K",[null]],"^8",1,"^5>",true,"^5L",[["^ ","^5J",0,"^5>",true,"^5M","^5@"]],"^7",229,"^5?","^5@","^9",229,"^5A",0,"^5B",true,"^55",["^1K",[["~$&","^5H"]]]],"~$clear-subscription-cache!",["^ ","^O","~$re-frame.core/clear-subscription-cache!","^6","re_frame/core.cljc","^7",49,"^8",1,"^9",49,"^:",31,"^5",["^ ","^6","re_frame/core.cljc","^7",49,"^8",6,"^9",49,"^:",31]]],"^1I",["^ ","^17","^17"],"~:cljs.analyzer/constants",["^ ","^1C",["^N",["~:warn"]],"~:order",["^76"]],"^1O",["^ ","^1D",["^N",[]]],"^1P",["^ "],"^1Q",["^19","^17","^13","^W","^U","^1=","^12","^[","^1;","^15","^16","^10","^1@","^Y"]],"^R","^P","~:ns-specs",["^ "],"~:ns-spec-vars",["^N",[]],"~:compiler-options",["^23",[["^7:","~:static-fns"],true,["^7:","~:shadow-tweaks"],null,["^7:","~:elide-asserts"],false,["^7:","~:optimize-constants"],null,["^7:","^1V"],null,["^7:","~:external-config"],null,["^7:","~:tooling-config"],null,["^7:","~:emit-constants"],null,["^7:","~:load-tests"],null,["^7:","~:form-size-threshold"],null,["^7:","~:infer-externs"],true,["^7:","^1X"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^7:","~:fn-invoke-direct"],null,["^7:","~:source-map"],"/dev/null"]]]